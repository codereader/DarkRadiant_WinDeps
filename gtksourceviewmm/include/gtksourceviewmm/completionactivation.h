// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_COMPLETIONACTIVATION_H
#define _GTKSOURCEVIEWMM_COMPLETIONACTIVATION_H


#include <glibmm.h>

/* completionactivation.h
 *
 * Copyright (C) 2010, 2011 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Gsv
{
// TODO: need docs. krnowak
/** @addtogroup gtksourceviewmmEnums gtksourceviewmm Enums and Flags */

/** An enum type specifying something bla bla bla, probably type of activation.
 *
 * @newin{2,10}
 * @ingroup gtksourceviewmmEnums
 * @par Bitwise operators:
 * <tt>%CompletionActivation operator|(CompletionActivation, CompletionActivation)</tt><br>
 * <tt>%CompletionActivation operator&(CompletionActivation, CompletionActivation)</tt><br>
 * <tt>%CompletionActivation operator^(CompletionActivation, CompletionActivation)</tt><br>
 * <tt>%CompletionActivation operator~(CompletionActivation)</tt><br>
 * <tt>%CompletionActivation& operator|=(CompletionActivation&, CompletionActivation)</tt><br>
 * <tt>%CompletionActivation& operator&=(CompletionActivation&, CompletionActivation)</tt><br>
 * <tt>%CompletionActivation& operator^=(CompletionActivation&, CompletionActivation)</tt><br>
 */
enum CompletionActivation
{
  COMPLETION_ACTIVATION_NONE = 0x0,
  COMPLETION_ACTIVATION_INTERACTIVE = 1 << 0,
  COMPLETION_ACTIVATION_USER_REQUESTED = 1 << 1
};

/** @ingroup gtksourceviewmmEnums */
inline CompletionActivation operator|(CompletionActivation lhs, CompletionActivation rhs)
  { return static_cast<CompletionActivation>(static_cast<unsigned>(lhs) | static_cast<unsigned>(rhs)); }

/** @ingroup gtksourceviewmmEnums */
inline CompletionActivation operator&(CompletionActivation lhs, CompletionActivation rhs)
  { return static_cast<CompletionActivation>(static_cast<unsigned>(lhs) & static_cast<unsigned>(rhs)); }

/** @ingroup gtksourceviewmmEnums */
inline CompletionActivation operator^(CompletionActivation lhs, CompletionActivation rhs)
  { return static_cast<CompletionActivation>(static_cast<unsigned>(lhs) ^ static_cast<unsigned>(rhs)); }

/** @ingroup gtksourceviewmmEnums */
inline CompletionActivation operator~(CompletionActivation flags)
  { return static_cast<CompletionActivation>(~static_cast<unsigned>(flags)); }

/** @ingroup gtksourceviewmmEnums */
inline CompletionActivation& operator|=(CompletionActivation& lhs, CompletionActivation rhs)
  { return (lhs = static_cast<CompletionActivation>(static_cast<unsigned>(lhs) | static_cast<unsigned>(rhs))); }

/** @ingroup gtksourceviewmmEnums */
inline CompletionActivation& operator&=(CompletionActivation& lhs, CompletionActivation rhs)
  { return (lhs = static_cast<CompletionActivation>(static_cast<unsigned>(lhs) & static_cast<unsigned>(rhs))); }

/** @ingroup gtksourceviewmmEnums */
inline CompletionActivation& operator^=(CompletionActivation& lhs, CompletionActivation rhs)
  { return (lhs = static_cast<CompletionActivation>(static_cast<unsigned>(lhs) ^ static_cast<unsigned>(rhs))); }

} // namespace Gsv


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gsv::CompletionActivation> : public Glib::Value_Flags<Gsv::CompletionActivation>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gsv
{

 /** @var CompletionActivation COMPLETION_ACTIVATION_NONE
  * None.
  */
 /** @var CompletionActivation COMPLETION_ACTIVATION_INTERACTIVE
  * Interactive activation.
  */
 /** @var CompletionActivation COMPLETION_ACTIVATION_USER_REQUESTED
  * User requested activation.
  *
  * For example through a keyboard accelerator from the view.
  */

} // namespace Gsv


#endif /* _GTKSOURCEVIEWMM_COMPLETIONACTIVATION_H */

