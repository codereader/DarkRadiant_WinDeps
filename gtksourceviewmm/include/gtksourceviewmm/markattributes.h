// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_MARKATTRIBUTES_H
#define _GTKSOURCEVIEWMM_MARKATTRIBUTES_H


#include <glibmm.h>

/* markattributes.h
 *
 * Copyright (C) 2010, 2011 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/// \file
/// \brief MarkAttributes class

#include <glibmm/object.h>
#include <glibmm/refptr.h>
//#include <gtksourceviewmm/view.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSourceMarkAttributes GtkSourceMarkAttributes;
typedef struct _GtkSourceMarkAttributesClass GtkSourceMarkAttributesClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gsv
{ class MarkAttributes_Class; } // namespace Gsv
namespace Gio
{

class Icon;

} // namespace Gio

namespace Gdk
{

class Pixbuf;
class RGBA;

} // namespace Gdk

namespace Gtk
{

class Widget;

} // namespace Gtk

namespace Gsv
{

class Mark;

// TODO: write docs.

class MarkAttributes : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef MarkAttributes CppObjectType;
  typedef MarkAttributes_Class CppClassType;
  typedef GtkSourceMarkAttributes BaseObjectType;
  typedef GtkSourceMarkAttributesClass BaseClassType;

private:  friend class MarkAttributes_Class;
  static CppClassType markattributes_class_;

private:
  // noncopyable
  MarkAttributes(const MarkAttributes&);
  MarkAttributes& operator=(const MarkAttributes&);

protected:
  explicit MarkAttributes(const Glib::ConstructParams& construct_params);
  explicit MarkAttributes(GtkSourceMarkAttributes* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~MarkAttributes();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkSourceMarkAttributes*       gobj()       { return reinterpret_cast<GtkSourceMarkAttributes*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkSourceMarkAttributes* gobj() const { return reinterpret_cast<GtkSourceMarkAttributes*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkSourceMarkAttributes* gobj_copy();

private:

protected:
  MarkAttributes();
public:
  
  static Glib::RefPtr<MarkAttributes> create();


  /** Stores background color in @a background.
   * @param background A Gdk::RGBA.
   * @return Whether background color for @a attributes was set.
   */
  bool get_background(Gdk::RGBA& rgba) const;

  bool is_background_set() const;

  
  /** Sets background color to the one given in @a background.
   * @param background A Gdk::RGBA.
   */
  void set_background(const Gdk::RGBA& rgba);

  
  /** Gets a stock id of an icon used by this attributes. Note that the stock id can
   * be <tt>0</tt> if it wasn't set earlier.
   * @return Stock id. Returned string is owned by @a attributes and
   * shouldn't be freed.
   */
  std::string get_stock_id() const;

  
  /** Sets stock id to be used as a base for rendered icon.
   * @param stock_id A stock id.
   */
  void set_stock_id(const std::string& stock_id);

  
  /** Sets a name of an icon to be used as a base for rendered icon.
   * @param icon_name Name of an icon to be used.
   */
  void set_icon_name(const std::string& icon_name);

  
  /** Gets a name of an icon to be used as a base for rendered icon. Note that the
   * icon name can be <tt>0</tt> if it wasn't set earlier.
   * @return An icon name. The string belongs to @a attributes and
   * should not be freed.
   */
  std::string get_icon_name() const;

 
  /** Gets a Icon to be used as a base for rendered icon. Note that the icon can
   * be <tt>0</tt> if it wasn't set earlier.
   * @return An icon. The icon belongs to @a attributes and should
   * not be unreffed.
   */
  Glib::RefPtr<Gio::Icon> get_icon();

  
  /** Gets a Icon to be used as a base for rendered icon. Note that the icon can
   * be <tt>0</tt> if it wasn't set earlier.
   * @return An icon. The icon belongs to @a attributes and should
   * not be unreffed.
   */
  Glib::RefPtr<const Gio::Icon> get_icon() const;

 
  /** Sets an icon to be used as a base for rendered icon.
   * @param gicon A Icon to be used.
   */
  void set_icon(const Glib::RefPtr<Gio::Icon>& icon);

 
  /** Gets a Gdk::Pixbuf to be used as a base for rendered icon. Note that the
   * pixbuf can be <tt>0</tt> if it wasn't set earlier.
   * @return A pixbuf. The pixbuf belongs to @a attributes and
   * should not be unreffed.
   */
  Glib::RefPtr<const Gdk::Pixbuf> get_pixbuf() const;

 
  /** Sets a pixbuf to be used as a base for rendered icon.
   * @param pixbuf A Gdk::Pixbuf to be used.
   */
  void set_pixbuf(const Glib::RefPtr<const Gdk::Pixbuf>& pixbuf);

  
  /** Renders an icon of given size. The base of the icon is set by the last call
   * to one of: set_pixbuf(),
   * set_gicon(),
   * set_icon_name() or
   * set_stock_id(). @a size cannot be lower than 1.
   * @param widget Widget of which style settings may be used.
   * @param size Size of the rendered icon.
   * @return A rendered pixbuf. The pixbuf belongs to @a attributes
   * and should not be unreffed.
   */
  Glib::RefPtr<const Gdk::Pixbuf> render_icon(Gtk::Widget* widget, int size) const;

  
  /** Queries for a tooltip by emitting
   * a GtkSourceMarkAttributes::query-tooltip-text signal. The tooltip is a plain
   * text.
   * @param mark A Gtk::SourceMark.
   * @return A tooltip. The returned string should be freed by
   * using Glib::free() when done with it.
   */
  Glib::ustring get_tooltip_text(const Glib::RefPtr<Mark>& mark) const;

  
  /** Queries for a tooltip by emitting
   * a GtkSourceMarkAttributes::query-tooltip-markup signal. The tooltip may contain
   * a markup.
   * @param mark A Gtk::SourceMark.
   * @return A tooltip. The returned string should be freed by
   * using Glib::free() when done with it.
   */
  Glib::ustring get_tooltip_markup(const Glib::RefPtr<Mark>& mark) const;

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The background.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<Gdk::RGBA> property_background() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The background.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Gdk::RGBA> property_background() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The stock id.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<std::string> property_stock_id() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The stock id.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<std::string> property_stock_id() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The pixbuf.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> > property_pixbuf() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The pixbuf.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> > property_pixbuf() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The icon name.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<std::string> property_icon_name() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The icon name.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<std::string> property_icon_name() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The GIcon.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gio::Icon> > property_gicon() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The GIcon.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::Icon> > property_gicon() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  /**
   * @par Prototype:
   * <tt>Glib::ustring on_my_%query_tooltip_text(const Glib::RefPtr<Mark>& mark)</tt>
   */

  Glib::SignalProxy1< Glib::ustring,const Glib::RefPtr<Mark>& > signal_query_tooltip_text();


  /**
   * @par Prototype:
   * <tt>Glib::ustring on_my_%query_tooltip_markup(const Glib::RefPtr<Mark>& mark)</tt>
   */

  Glib::SignalProxy1< Glib::ustring,const Glib::RefPtr<Mark>& > signal_query_tooltip_markup();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gsv


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gsv::MarkAttributes
   */
  Glib::RefPtr<Gsv::MarkAttributes> wrap(GtkSourceMarkAttributes* object, bool take_copy = false);
}


#endif /* _GTKSOURCEVIEWMM_MARKATTRIBUTES_H */

