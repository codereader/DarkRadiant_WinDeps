// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_COMPLETIONCONTEXT_H
#define _GTKSOURCEVIEWMM_COMPLETIONCONTEXT_H


#include <glibmm.h>

/* completioncontext.h
 *
 * Copyright (C) 2009, 2010, 2011 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <vector>

#include <gtksourceview/gtksourceview-typebuiltins.h>

#include <glibmm/object.h>

#include <gtksourceviewmm/completionactivation.h>
#include <gtksourceviewmm/view.h>
#include <gtksourceviewmm/completionprovider.h>
#include <gtksourceviewmm/completionproposal.h>
#include <gtksourceviewmm/completion.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSourceCompletionContext GtkSourceCompletionContext;
typedef struct _GtkSourceCompletionContextClass GtkSourceCompletionContextClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gsv
{ class CompletionContext_Class; } // namespace Gsv
namespace Gsv
{

class CompletionProvider;
class Completion;
class View;

// TODO: need docs here. krnowak
/** CompletionContext
 *
 * @newin{2,10}
 */

class CompletionContext : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef CompletionContext CppObjectType;
  typedef CompletionContext_Class CppClassType;
  typedef GtkSourceCompletionContext BaseObjectType;
  typedef GtkSourceCompletionContextClass BaseClassType;

private:  friend class CompletionContext_Class;
  static CppClassType completioncontext_class_;

private:
  // noncopyable
  CompletionContext(const CompletionContext&);
  CompletionContext& operator=(const CompletionContext&);

protected:
  explicit CompletionContext(const Glib::ConstructParams& construct_params);
  explicit CompletionContext(GtkSourceCompletionContext* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~CompletionContext();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkSourceCompletionContext*       gobj()       { return reinterpret_cast<GtkSourceCompletionContext*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkSourceCompletionContext* gobj() const { return reinterpret_cast<GtkSourceCompletionContext*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkSourceCompletionContext* gobj_copy();

private:

public:
 

  /** Providers can use this function to add proposals to the completion.
   *
   * They can do so asynchronously by means of the @a finished argument.
   * Providers must ensure that they always call this function with @a finished
   * set to @c true once each population (even if no proposals need to be
   * added).
   *
   * @param provider A CompletionProvider.
   * @param proposals The list of proposals to add.
   * @param finished Whether the provider is finished adding proposals.
   *
   * @newin{2,10}
   */
  void add_proposals(const Glib::RefPtr<CompletionProvider>& provider, const std::vector<Glib::RefPtr<CompletionProposal> >& proposals, bool finished);

  
  /** Get the iter at which the completion was invoked.
   *
   * Providers can use this to determine how and if to match proposals.
   *
   * @return A Gtk::TextIter.
   *
   * @newin{2,10}
   */
  Gtk::TextIter get_iter() const;

  
  /** Get the context activation
   *
   * @return The context activation.
   *
   * @newin{2,10}
   */
  CompletionActivation get_activation() const;

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The type of activation.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<CompletionActivation> property_activation() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The type of activation.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<CompletionActivation> property_activation() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The completion object to which the context belongs.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Completion> > property_completion() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The GtkTextIter at which the completion was invoked.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<Gtk::TextIter> property_iter() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The GtkTextIter at which the completion was invoked.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Gtk::TextIter> property_iter() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  /** Emitted when the current population of proposals has been cancelled.
   *
   * Providers adding proposals asynchronously should connect to this signal
   * to know when to cancel running proposal queries.
   *
   * @newin{2,10}
   *
   * @par Prototype:
   * <tt>void on_my_%cancelled()</tt>
   */

  Glib::SignalProxy0< void > signal_cancelled();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  virtual void on_cancelled();


};

} /* namespace Gsv */


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gsv::CompletionContext
   */
  Glib::RefPtr<Gsv::CompletionContext> wrap(GtkSourceCompletionContext* object, bool take_copy = false);
}


#endif /* _GTKSOURCEVIEWMM_COMPLETIONCONTEXT_H */

