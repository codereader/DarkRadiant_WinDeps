// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/completionprovider.h>
#include <gtksourceviewmm/private/completionprovider_p.h>

/* completionprovider.cc
 *
 * Copyright (C) 2009, 2010, 2011 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gsv::CompletionProvider> wrap(GtkSourceCompletionProvider* object, bool take_copy)
{
  return Glib::RefPtr<Gsv::CompletionProvider>( dynamic_cast<Gsv::CompletionProvider*> (Glib::wrap_auto_interface<Gsv::CompletionProvider> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gsv
{


/* The *_Class implementation: */

const Glib::Interface_Class& CompletionProvider_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &CompletionProvider_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = gtk_source_completion_provider_get_type();
  }

  return *this;
}

void CompletionProvider_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 

  klass->get_name = &get_name_vfunc_callback;
  klass->get_icon = &get_icon_vfunc_callback;
  klass->populate = &populate_vfunc_callback;
  klass->match = &match_vfunc_callback;
  klass->get_activation = &get_activation_vfunc_callback;
  klass->get_info_widget = &get_info_widget_vfunc_callback;
  klass->update_info = &update_info_vfunc_callback;
  klass->get_start_iter = &get_start_iter_vfunc_callback;
  klass->activate_proposal = &activate_proposal_vfunc_callback;
  klass->get_interactive_delay = &get_interactive_delay_vfunc_callback;
  klass->get_priority = &get_priority_vfunc_callback;

}

char* CompletionProvider_Class::get_name_vfunc_callback(GtkSourceCompletionProvider* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return g_strdup((obj->get_name_vfunc()).c_str());
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_name)
    return (*base->get_name)(self);


  typedef char* RType;
  return RType();
}
GdkPixbuf* CompletionProvider_Class::get_icon_vfunc_callback(GtkSourceCompletionProvider* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return Glib::unwrap(obj->get_icon_vfunc());
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_icon)
    return (*base->get_icon)(self);


  typedef GdkPixbuf* RType;
  return RType();
}
void CompletionProvider_Class::populate_vfunc_callback(GtkSourceCompletionProvider* self, GtkSourceCompletionContext* context)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->populate_vfunc(Glib::wrap(context, true)
);
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->populate)
    (*base->populate)(self, context);

}
gboolean CompletionProvider_Class::match_vfunc_callback(GtkSourceCompletionProvider* self, GtkSourceCompletionContext* context)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->match_vfunc(Glib::wrap(context, true)
));
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->match)
    return (*base->match)(self, context);


  typedef gboolean RType;
  return RType();
}
GtkSourceCompletionActivation CompletionProvider_Class::get_activation_vfunc_callback(GtkSourceCompletionProvider* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return ((GtkSourceCompletionActivation)(obj->get_activation_vfunc()));
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_activation)
    return (*base->get_activation)(self);


  typedef GtkSourceCompletionActivation RType;
  return RType();
}
GtkWidget* CompletionProvider_Class::get_info_widget_vfunc_callback(GtkSourceCompletionProvider* self, GtkSourceCompletionProposal* proposal)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return (GtkWidget*)Glib::unwrap(obj->get_info_widget_vfunc(Glib::wrap(proposal, true)
));
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_info_widget)
    return (*base->get_info_widget)(self, proposal);


  typedef GtkWidget* RType;
  return RType();
}
void CompletionProvider_Class::update_info_vfunc_callback(GtkSourceCompletionProvider* self, GtkSourceCompletionProposal* proposal, GtkSourceCompletionInfo* info)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->update_info_vfunc(Glib::wrap(proposal, true)
, (*(Glib::wrap(info)))
);
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->update_info)
    (*base->update_info)(self, proposal, info);

}
gboolean CompletionProvider_Class::get_start_iter_vfunc_callback(GtkSourceCompletionProvider* self, GtkSourceCompletionContext* context, GtkSourceCompletionProposal* proposal, GtkTextIter* iter)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->get_start_iter_vfunc(Glib::wrap(context, true)
, Glib::wrap(proposal, true)
, Glib::wrap(iter)
));
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_start_iter)
    return (*base->get_start_iter)(self, context, proposal, iter);


  typedef gboolean RType;
  return RType();
}
gboolean CompletionProvider_Class::activate_proposal_vfunc_callback(GtkSourceCompletionProvider* self, GtkSourceCompletionProposal* proposal, GtkTextIter* iter)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->activate_proposal_vfunc(Glib::wrap(proposal, true)
, Glib::wrap(iter)
));
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->activate_proposal)
    return (*base->activate_proposal)(self, proposal, iter);


  typedef gboolean RType;
  return RType();
}
int CompletionProvider_Class::get_interactive_delay_vfunc_callback(GtkSourceCompletionProvider* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return obj->get_interactive_delay_vfunc();
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_interactive_delay)
    return (*base->get_interactive_delay)(self);


  typedef int RType;
  return RType();
}
int CompletionProvider_Class::get_priority_vfunc_callback(GtkSourceCompletionProvider* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return obj->get_priority_vfunc();
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_priority)
    return (*base->get_priority)(self);


  typedef int RType;
  return RType();
}


Glib::ObjectBase* CompletionProvider_Class::wrap_new(GObject* object)
{
  return new CompletionProvider((GtkSourceCompletionProvider*)(object));
}


/* The implementation: */

CompletionProvider::CompletionProvider()
:
  Glib::Interface(completionprovider_class_.init())
{}

CompletionProvider::CompletionProvider(GtkSourceCompletionProvider* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

CompletionProvider::CompletionProvider(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

CompletionProvider::~CompletionProvider()
{}

// static
void CompletionProvider::add_interface(GType gtype_implementer)
{
  completionprovider_class_.init().add_interface(gtype_implementer);
}

CompletionProvider::CppClassType CompletionProvider::completionprovider_class_; // initialize static member

GType CompletionProvider::get_type()
{
  return completionprovider_class_.init().get_type();
}


GType CompletionProvider::get_base_type()
{
  return gtk_source_completion_provider_get_type();
}


Glib::ustring CompletionProvider::get_name() const
{
  return Glib::convert_return_gchar_ptr_to_ustring(gtk_source_completion_provider_get_name(const_cast<GtkSourceCompletionProvider*>(gobj())));
}

Glib::RefPtr<Gdk::Pixbuf> CompletionProvider::get_icon()
{

  Glib::RefPtr<Gdk::Pixbuf> retvalue = Glib::wrap(gtk_source_completion_provider_get_icon(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const Gdk::Pixbuf> CompletionProvider::get_icon() const
{
  return const_cast<CompletionProvider*>(this)->get_icon();
}

void CompletionProvider::populate(const Glib::RefPtr<CompletionContext>& context)
{
gtk_source_completion_provider_populate(gobj(), Glib::unwrap(context)); 
}

bool CompletionProvider::match(const Glib::RefPtr<const CompletionContext>& context) const
{
  return gtk_source_completion_provider_match(const_cast<GtkSourceCompletionProvider*>(gobj()), const_cast<GtkSourceCompletionContext*>(Glib::unwrap(context)));
}

Gtk::Widget* CompletionProvider::get_info_widget(const Glib::RefPtr<const CompletionProposal>& proposal)
{
  return Glib::wrap(gtk_source_completion_provider_get_info_widget(gobj(), const_cast<GtkSourceCompletionProposal*>(Glib::unwrap(proposal))));
}

const Gtk::Widget* CompletionProvider::get_info_widget(const Glib::RefPtr<const CompletionProposal>& proposal) const
{
  return const_cast<CompletionProvider*>(this)->get_info_widget(proposal);
}

void CompletionProvider::update_info(const Glib::RefPtr<const CompletionProposal>& proposal, const CompletionInfo& info)
{
gtk_source_completion_provider_update_info(gobj(), const_cast<GtkSourceCompletionProposal*>(Glib::unwrap(proposal)), const_cast<GtkSourceCompletionInfo*>((info).gobj())); 
}

bool CompletionProvider::get_start_iter(const Glib::RefPtr<const CompletionContext>& context, const Glib::RefPtr<const CompletionProposal>& proposal, Gtk::TextIter& iter)
{
  return gtk_source_completion_provider_get_start_iter(gobj(), const_cast<GtkSourceCompletionContext*>(Glib::unwrap(context)), const_cast<GtkSourceCompletionProposal*>(Glib::unwrap(proposal)), (iter).gobj());
}

bool CompletionProvider::activate_proposal(const Glib::RefPtr<CompletionProposal>& proposal, const Gtk::TextIter& iter)
{
  return gtk_source_completion_provider_activate_proposal(gobj(), Glib::unwrap(proposal), const_cast<GtkTextIter*>((iter).gobj()));
}

CompletionActivation CompletionProvider::get_activation() const
{
  return ((CompletionActivation)(gtk_source_completion_provider_get_activation(const_cast<GtkSourceCompletionProvider*>(gobj()))));
}

int CompletionProvider::get_interactive_delay() const
{
  return gtk_source_completion_provider_get_interactive_delay(const_cast<GtkSourceCompletionProvider*>(gobj()));
}

int CompletionProvider::get_priority() const
{
  return gtk_source_completion_provider_get_priority(const_cast<GtkSourceCompletionProvider*>(gobj()));
}


Glib::ustring Gsv::CompletionProvider::get_name_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_name)
    return Glib::convert_const_gchar_ptr_to_ustring((*base->get_name)(const_cast<GtkSourceCompletionProvider*>(gobj())));

  typedef Glib::ustring RType;
  return RType();
}
Glib::RefPtr<Gdk::Pixbuf> Gsv::CompletionProvider::get_icon_vfunc() 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_icon)
    return Glib::wrap((*base->get_icon)(gobj()), true);

  typedef Glib::RefPtr<Gdk::Pixbuf> RType;
  return RType();
}
void Gsv::CompletionProvider::populate_vfunc(const Glib::RefPtr<CompletionContext>& context) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->populate)
    (*base->populate)(gobj(),Glib::unwrap(context));
}
bool Gsv::CompletionProvider::match_vfunc(const Glib::RefPtr<const CompletionContext>& context) const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->match)
    return (*base->match)(const_cast<GtkSourceCompletionProvider*>(gobj()),const_cast<GtkSourceCompletionContext*>(Glib::unwrap(context)));

  typedef bool RType;
  return RType();
}
CompletionActivation Gsv::CompletionProvider::get_activation_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_activation)
    return ((CompletionActivation)((*base->get_activation)(const_cast<GtkSourceCompletionProvider*>(gobj()))));

  typedef CompletionActivation RType;
  return RType();
}
Gtk::Widget* Gsv::CompletionProvider::get_info_widget_vfunc(const Glib::RefPtr<const CompletionProposal>& proposal) const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_info_widget)
    return Glib::wrap((*base->get_info_widget)(const_cast<GtkSourceCompletionProvider*>(gobj()),const_cast<GtkSourceCompletionProposal*>(Glib::unwrap(proposal))));

  typedef Gtk::Widget* RType;
  return RType();
}
void Gsv::CompletionProvider::update_info_vfunc(const Glib::RefPtr<const CompletionProposal>& proposal, const CompletionInfo& info) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->update_info)
    (*base->update_info)(gobj(),const_cast<GtkSourceCompletionProposal*>(Glib::unwrap(proposal)),const_cast<GtkSourceCompletionInfo*>((info).gobj()));
}
bool Gsv::CompletionProvider::get_start_iter_vfunc(const Glib::RefPtr<const CompletionContext>& context, const Glib::RefPtr<const CompletionProposal>& proposal, Gtk::TextIter& iter) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_start_iter)
    return (*base->get_start_iter)(gobj(),const_cast<GtkSourceCompletionContext*>(Glib::unwrap(context)),const_cast<GtkSourceCompletionProposal*>(Glib::unwrap(proposal)),(iter).gobj());

  typedef bool RType;
  return RType();
}
bool Gsv::CompletionProvider::activate_proposal_vfunc(const Glib::RefPtr<CompletionProposal>& proposal, const Gtk::TextIter& iter) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->activate_proposal)
    return (*base->activate_proposal)(gobj(),Glib::unwrap(proposal),const_cast<GtkTextIter*>((iter).gobj()));

  typedef bool RType;
  return RType();
}
int Gsv::CompletionProvider::get_interactive_delay_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_interactive_delay)
    return (*base->get_interactive_delay)(const_cast<GtkSourceCompletionProvider*>(gobj()));

  typedef int RType;
  return RType();
}
int Gsv::CompletionProvider::get_priority_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_priority)
    return (*base->get_priority)(const_cast<GtkSourceCompletionProvider*>(gobj()));

  typedef int RType;
  return RType();
}


} // namespace Gsv


