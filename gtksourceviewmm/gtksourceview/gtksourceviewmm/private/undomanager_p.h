// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_UNDOMANAGER_P_H
#define _GTKSOURCEVIEWMM_UNDOMANAGER_P_H


#include <glibmm/private/interface_p.h>

#include <glibmm/private/interface_p.h>

namespace Gsv
{

class UndoManager_Class : public Glib::Interface_Class
{
public:
  typedef UndoManager CppObjectType;
  typedef GtkSourceUndoManager BaseObjectType;
  typedef GtkSourceUndoManagerIface BaseClassType;
  typedef Glib::Interface_Class CppClassParent;

  friend class UndoManager;

  const Glib::Interface_Class& init();

  static void iface_init_function(void* g_iface, void* iface_data);

  static Glib::ObjectBase* wrap_new(GObject*);

protected:

  //Callbacks (default signal handlers):
  //These will call the *_impl member methods, which will then call the existing default signal callbacks, if any.
  //You could prevent the original default signal handlers being called by overriding the *_impl method.
  static void can_undo_changed_callback(GtkSourceUndoManager* self);
  static void can_redo_changed_callback(GtkSourceUndoManager* self);

  //Callbacks (virtual functions):
  static gboolean can_undo_vfunc_callback(GtkSourceUndoManager* self);
  static gboolean can_redo_vfunc_callback(GtkSourceUndoManager* self);
  static void undo_vfunc_callback(GtkSourceUndoManager* self);
  static void redo_vfunc_callback(GtkSourceUndoManager* self);
  static void begin_not_undoable_action_vfunc_callback(GtkSourceUndoManager* self);
  static void end_not_undoable_action_vfunc_callback(GtkSourceUndoManager* self);
};


} // namespace Gsv


#endif /* _GTKSOURCEVIEWMM_UNDOMANAGER_P_H */

