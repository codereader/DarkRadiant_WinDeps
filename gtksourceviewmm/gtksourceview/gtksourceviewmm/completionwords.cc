// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/completionwords.h>
#include <gtksourceviewmm/private/completionwords_p.h>

/* completionwords.cc
 *
 * Copyright (C) 2010, 2011 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtksourceview/completion-providers/words/gtksourcecompletionwords.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gsv::CompletionWords> wrap(GtkSourceCompletionWords* object, bool take_copy)
{
  return Glib::RefPtr<Gsv::CompletionWords>( dynamic_cast<Gsv::CompletionWords*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gsv
{


/* The *_Class implementation: */

const Glib::Class& CompletionWords_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &CompletionWords_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_source_completion_words_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  CompletionProvider::add_interface(get_type());

  }

  return *this;
}


void CompletionWords_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* CompletionWords_Class::wrap_new(GObject* object)
{
  return new CompletionWords((GtkSourceCompletionWords*)object);
}


/* The implementation: */

GtkSourceCompletionWords* CompletionWords::gobj_copy()
{
  reference();
  return gobj();
}

CompletionWords::CompletionWords(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

CompletionWords::CompletionWords(GtkSourceCompletionWords* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


CompletionWords::~CompletionWords()
{}


CompletionWords::CppClassType CompletionWords::completionwords_class_; // initialize static member

GType CompletionWords::get_type()
{
  return completionwords_class_.init().get_type();
}


GType CompletionWords::get_base_type()
{
  return gtk_source_completion_words_get_type();
}


CompletionWords::CompletionWords(const Glib::ustring& name, const Glib::RefPtr<Gdk::Pixbuf>& icon)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Glib::Object(Glib::ConstructParams(completionwords_class_.init(), "name", name.c_str(), "icon", Glib::unwrap(icon), static_cast<char*>(0)))
{
  

}

Glib::RefPtr<CompletionWords> CompletionWords::create(const Glib::ustring& name, const Glib::RefPtr<Gdk::Pixbuf>& icon)
{
  return Glib::RefPtr<CompletionWords>( new CompletionWords(name, icon) );
}

void CompletionWords::register_provider(const Glib::RefPtr<Gtk::TextBuffer>& buffer)
{
gtk_source_completion_words_register(gobj(), Glib::unwrap(buffer)); 
}

void CompletionWords::unregister_provider(const Glib::RefPtr<Gtk::TextBuffer>& buffer)
{
gtk_source_completion_words_unregister(gobj(), Glib::unwrap(buffer)); 
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<Glib::ustring> CompletionWords::property_name() 
{
  return Glib::PropertyProxy<Glib::ustring>(this, "name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> CompletionWords::property_name() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> > CompletionWords::property_icon() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> >(this, "icon");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> > CompletionWords::property_icon() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> >(this, "icon");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<guint> CompletionWords::property_proposals_batch_size() 
{
  return Glib::PropertyProxy<guint>(this, "proposals-batch-size");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<guint> CompletionWords::property_proposals_batch_size() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "proposals-batch-size");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<guint> CompletionWords::property_scan_batch_size() 
{
  return Glib::PropertyProxy<guint>(this, "scan-batch-size");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<guint> CompletionWords::property_scan_batch_size() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "scan-batch-size");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<guint> CompletionWords::property_minimum_word_size() 
{
  return Glib::PropertyProxy<guint>(this, "minimum-word-size");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<guint> CompletionWords::property_minimum_word_size() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "minimum-word-size");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<int> CompletionWords::property_interactive_delay() 
{
  return Glib::PropertyProxy<int>(this, "interactive-delay");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<int> CompletionWords::property_interactive_delay() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "interactive-delay");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<int> CompletionWords::property_priority() 
{
  return Glib::PropertyProxy<int>(this, "priority");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<int> CompletionWords::property_priority() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "priority");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gsv


