// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/mark.h>
#include <gtksourceviewmm/private/mark_p.h>

/* mark.cc
 *
 * Copyright (C) 2008 Jonathon Jongsma
 * Copyright (C) 2010, 2011 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtksourceview/gtksourcemark.h>

namespace Gsv
{

// Both constructors are implemented by hand because the C _new() function
// specifies an extra left-gravity property.
Mark::Mark(const Glib::ustring& category)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::TextMark(Glib::ConstructParams(mark_class_.init(), "name",0,"category",category.c_str(),"left-gravity",TRUE, static_cast<char*>(0)))
{}

Mark::Mark(const Glib::ustring& name, const Glib::ustring& category)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::TextMark(Glib::ConstructParams(mark_class_.init(), "name",name.c_str(),"category",category.c_str(),"left-gravity",TRUE, static_cast<char*>(0)))
{}

Glib::RefPtr<Mark> Mark::next()
{
  Glib::RefPtr<Mark> result = Glib::wrap (gtk_source_mark_next(const_cast<GtkSourceMark*>(gobj()), 0));
  if (result)
  {
    result->reference();
  }
  return result;
}

Glib::RefPtr<const Mark> Mark::next() const
{
  Glib::RefPtr<const Mark> result = Glib::wrap (gtk_source_mark_next(const_cast<GtkSourceMark*>(gobj()), 0));
  if (result)
  {
    result->reference();
  }
  return result;
}

Glib::RefPtr<Mark> Mark::prev()
{
  Glib::RefPtr<Mark> result =  Glib::wrap (gtk_source_mark_prev(const_cast<GtkSourceMark*>(gobj()), 0));
  if (result)
  {
    result->reference();
  }
  return result;
}

Glib::RefPtr<const Mark> Mark::prev() const
{
  Glib::RefPtr<const Mark> result =  Glib::wrap (gtk_source_mark_prev(const_cast<GtkSourceMark*>(gobj()), 0));
  if (result)
  {
    result->reference();
  }
  return result;
}


} //namespace Gsv


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gsv::Mark> wrap(GtkSourceMark* object, bool take_copy)
{
  return Glib::RefPtr<Gsv::Mark>( dynamic_cast<Gsv::Mark*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gsv
{


/* The *_Class implementation: */

const Glib::Class& Mark_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Mark_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_source_mark_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void Mark_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Mark_Class::wrap_new(GObject* object)
{
  return new Mark((GtkSourceMark*)object);
}


/* The implementation: */

GtkSourceMark* Mark::gobj_copy()
{
  reference();
  return gobj();
}

Mark::Mark(const Glib::ConstructParams& construct_params)
:
  Gtk::TextMark(construct_params)
{

}

Mark::Mark(GtkSourceMark* castitem)
:
  Gtk::TextMark((GtkTextMark*)(castitem))
{}


Mark::~Mark()
{}


Mark::CppClassType Mark::mark_class_; // initialize static member

GType Mark::get_type()
{
  return mark_class_.init().get_type();
}


GType Mark::get_base_type()
{
  return gtk_source_mark_get_type();
}


Glib::RefPtr<Mark> Mark::create(const Glib::ustring& category)
{
  return Glib::RefPtr<Mark>( new Mark(category) );
}

Glib::RefPtr<Mark> Mark::create(const Glib::ustring& name, const Glib::ustring& category)
{
  return Glib::RefPtr<Mark>( new Mark(name, category) );
}

Glib::ustring Mark::get_category() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_source_mark_get_category(const_cast<GtkSourceMark*>(gobj())));
}

Glib::RefPtr<Gsv::Mark> Mark::next(const Glib::ustring& category)
{

  Glib::RefPtr<Gsv::Mark> retvalue = Glib::wrap(gtk_source_mark_next(gobj(), category.c_str()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const Gsv::Mark> Mark::next(const Glib::ustring& category) const
{
  return const_cast<Mark*>(this)->next(category);
}

Glib::RefPtr<Gsv::Mark> Mark::prev(const Glib::ustring& category)
{

  Glib::RefPtr<Gsv::Mark> retvalue = Glib::wrap(gtk_source_mark_prev(gobj(), category.c_str()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const Gsv::Mark> Mark::prev(const Glib::ustring& category) const
{
  return const_cast<Mark*>(this)->prev(category);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> Mark::property_category() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "category");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gsv


