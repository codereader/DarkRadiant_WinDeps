// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/style.h>
#include <gtksourceviewmm/private/style_p.h>

/* style.cc
 *
 * Copyright (C) 2007 The gtksourceviewmm team.
 * Copyright (C) 2009, 2010, 2011 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtksourceview/gtksourcestyle.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gsv::Style> wrap(GtkSourceStyle* object, bool take_copy)
{
  return Glib::RefPtr<Gsv::Style>( dynamic_cast<Gsv::Style*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gsv
{


/* The *_Class implementation: */

const Glib::Class& Style_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Style_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_source_style_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void Style_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Style_Class::wrap_new(GObject* object)
{
  return new Style((GtkSourceStyle*)object);
}


/* The implementation: */

GtkSourceStyle* Style::gobj_copy()
{
  reference();
  return gobj();
}

Style::Style(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

Style::Style(GtkSourceStyle* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


Style::~Style()
{}


Style::CppClassType Style::style_class_; // initialize static member

GType Style::get_type()
{
  return style_class_.init().get_type();
}


GType Style::get_base_type()
{
  return gtk_source_style_get_type();
}


Glib::RefPtr<Style> Style::copy() const
{
  return Glib::wrap(gtk_source_style_copy(const_cast<GtkSourceStyle*>(gobj())));
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> Style::property_background() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "background");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_background_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "background-set");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_bold() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "bold");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_bold_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "bold-set");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> Style::property_foreground() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "foreground");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_foreground_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "foreground-set");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_italic() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "italic");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_italic_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "italic-set");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> Style::property_line_background() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "line-background");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_line_background_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "line-background-set");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_strikethrough() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "strikethrough");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_strikethrough_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "strikethrough-set");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_underline() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "underline");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Style::property_underline_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "underline-set");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gsv


