// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/stylescheme.h>
#include <gtksourceviewmm/private/stylescheme_p.h>

/* stylescheme.cc
 *
 * Copyright (C) 2004-2005 Jae Jang
 * Copyright (C) 2005-2006 Rob Page
 * Copyright (C) 2006 Dodji Seketeli
 * Copyright (C) 2009, 2010, 2011 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/vectorutils.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gsv::StyleScheme> wrap(GtkSourceStyleScheme* object, bool take_copy)
{
  return Glib::RefPtr<Gsv::StyleScheme>( dynamic_cast<Gsv::StyleScheme*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gsv
{


/* The *_Class implementation: */

const Glib::Class& StyleScheme_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &StyleScheme_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_source_style_scheme_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void StyleScheme_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* StyleScheme_Class::wrap_new(GObject* object)
{
  return new StyleScheme((GtkSourceStyleScheme*)object);
}


/* The implementation: */

GtkSourceStyleScheme* StyleScheme::gobj_copy()
{
  reference();
  return gobj();
}

StyleScheme::StyleScheme(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

StyleScheme::StyleScheme(GtkSourceStyleScheme* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


StyleScheme::~StyleScheme()
{}


StyleScheme::CppClassType StyleScheme::stylescheme_class_; // initialize static member

GType StyleScheme::get_type()
{
  return stylescheme_class_.init().get_type();
}


GType StyleScheme::get_base_type()
{
  return gtk_source_style_scheme_get_type();
}


Glib::ustring StyleScheme::get_id() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_source_style_scheme_get_id(const_cast<GtkSourceStyleScheme*>(gobj())));
}

Glib::ustring StyleScheme::get_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_source_style_scheme_get_name(const_cast<GtkSourceStyleScheme*>(gobj())));
}

Glib::ustring StyleScheme::get_description() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_source_style_scheme_get_description(const_cast<GtkSourceStyleScheme*>(gobj())));
}

std::vector<Glib::ustring> StyleScheme::get_authors() const
{
  return Glib::ArrayHandler<Glib::ustring>::array_to_vector(gtk_source_style_scheme_get_authors(const_cast<GtkSourceStyleScheme*>(gobj())), Glib::OWNERSHIP_NONE);
}

std::string StyleScheme::get_filename() const
{
  return Glib::convert_const_gchar_ptr_to_stdstring(gtk_source_style_scheme_get_filename(const_cast<GtkSourceStyleScheme*>(gobj())));
}

Glib::RefPtr<Style> StyleScheme::get_style(const Glib::ustring& style_id)
{

  Glib::RefPtr<Style> retvalue = Glib::wrap(gtk_source_style_scheme_get_style(gobj(), style_id.c_str()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const Style> StyleScheme::get_style(const Glib::ustring& style_id) const
{
  return const_cast<StyleScheme*>(this)->get_style(style_id);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<std::string> StyleScheme::property_id() const
{
  return Glib::PropertyProxy_ReadOnly<std::string>(this, "id");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> StyleScheme::property_name() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> StyleScheme::property_description() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "description");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<std::string> StyleScheme::property_filename() const
{
  return Glib::PropertyProxy_ReadOnly<std::string>(this, "filename");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gsv


