// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <giomm/threadedsocketservice.h>
#include <giomm/private/threadedsocketservice_p.h>


// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2010 Jonathon Jongsma
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <glibmm/exceptionhandler.h>

namespace Gio
{
} // namespace Gio

namespace
{


static gboolean ThreadedSocketService_signal_run_callback(GThreadedSocketService* self, GSocketConnection* p0,GObject* p1,void* data)
{
  using namespace Gio;
  typedef sigc::slot< bool,const Glib::RefPtr<SocketConnection>&,const Glib::RefPtr<Glib::Object>& > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        return static_cast<int>((*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
));
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gboolean RType;
  return RType();
}

static gboolean ThreadedSocketService_signal_run_notify_callback(GThreadedSocketService* self, GSocketConnection* p0,GObject* p1, void* data)
{
  using namespace Gio;
  typedef sigc::slot< void,const Glib::RefPtr<SocketConnection>&,const Glib::RefPtr<Glib::Object>& > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gboolean RType;
  return RType();
}

static const Glib::SignalProxyInfo ThreadedSocketService_signal_run_info =
{
  "run",
  (GCallback) &ThreadedSocketService_signal_run_callback,
  (GCallback) &ThreadedSocketService_signal_run_notify_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::ThreadedSocketService> wrap(GThreadedSocketService* object, bool take_copy)
{
  return Glib::RefPtr<Gio::ThreadedSocketService>( dynamic_cast<Gio::ThreadedSocketService*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& ThreadedSocketService_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ThreadedSocketService_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_threaded_socket_service_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void ThreadedSocketService_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->run = &run_callback;
}


gboolean ThreadedSocketService_Class::run_callback(GThreadedSocketService* self, GSocketConnection* p0, GObject* p1)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->on_run(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
));
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->run)
    return (*base->run)(self, p0, p1);

  typedef gboolean RType;
  return RType();
}


Glib::ObjectBase* ThreadedSocketService_Class::wrap_new(GObject* object)
{
  return new ThreadedSocketService((GThreadedSocketService*)object);
}


/* The implementation: */

GThreadedSocketService* ThreadedSocketService::gobj_copy()
{
  reference();
  return gobj();
}

ThreadedSocketService::ThreadedSocketService(const Glib::ConstructParams& construct_params)
:
  Gio::SocketService(construct_params)
{

}

ThreadedSocketService::ThreadedSocketService(GThreadedSocketService* castitem)
:
  Gio::SocketService((GSocketService*)(castitem))
{}


ThreadedSocketService::~ThreadedSocketService()
{}


ThreadedSocketService::CppClassType ThreadedSocketService::threadedsocketservice_class_; // initialize static member

GType ThreadedSocketService::get_type()
{
  return threadedsocketservice_class_.init().get_type();
}


GType ThreadedSocketService::get_base_type()
{
  return g_threaded_socket_service_get_type();
}


ThreadedSocketService::ThreadedSocketService(int max_threads)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gio::SocketService(Glib::ConstructParams(threadedsocketservice_class_.init(), "max_threads", max_threads, static_cast<char*>(0)))
{
  

}

Glib::RefPtr<ThreadedSocketService> ThreadedSocketService::create(int max_threads)
{
  return Glib::RefPtr<ThreadedSocketService>( new ThreadedSocketService(max_threads) );
}


Glib::SignalProxy2< bool,const Glib::RefPtr<SocketConnection>&,const Glib::RefPtr<Glib::Object>& > ThreadedSocketService::signal_run()
{
  return Glib::SignalProxy2< bool,const Glib::RefPtr<SocketConnection>&,const Glib::RefPtr<Glib::Object>& >(this, &ThreadedSocketService_signal_run_info);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< int > ThreadedSocketService::property_max_threads() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "max-threads");
}
#endif //GLIBMM_PROPERTIES_ENABLED


bool Gio::ThreadedSocketService::on_run(const Glib::RefPtr<SocketConnection>& connection, const Glib::RefPtr<Glib::Object>& source_object)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->run)
    return (*base->run)(gobj(),const_cast<GSocketConnection*>(Glib::unwrap(connection)),Glib::unwrap(source_object));

  typedef bool RType;
  return RType();
}


} // namespace Gio


