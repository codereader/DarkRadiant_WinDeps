// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <giomm/simpleactiongroup.h>
#include <giomm/private/simpleactiongroup_p.h>


/* Copyright (C) 2011 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <giomm/action.h>

namespace Gio
{

}// namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::SimpleActionGroup> wrap(GSimpleActionGroup* object, bool take_copy)
{
  return Glib::RefPtr<Gio::SimpleActionGroup>( dynamic_cast<Gio::SimpleActionGroup*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& SimpleActionGroup_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SimpleActionGroup_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_simple_action_group_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  ActionGroup::add_interface(get_type());
  ActionMap::add_interface(get_type());

  }

  return *this;
}


void SimpleActionGroup_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* SimpleActionGroup_Class::wrap_new(GObject* object)
{
  return new SimpleActionGroup((GSimpleActionGroup*)object);
}


/* The implementation: */

GSimpleActionGroup* SimpleActionGroup::gobj_copy()
{
  reference();
  return gobj();
}

SimpleActionGroup::SimpleActionGroup(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

SimpleActionGroup::SimpleActionGroup(GSimpleActionGroup* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


SimpleActionGroup::~SimpleActionGroup()
{}


SimpleActionGroup::CppClassType SimpleActionGroup::simpleactiongroup_class_; // initialize static member

GType SimpleActionGroup::get_type()
{
  return simpleactiongroup_class_.init().get_type();
}


GType SimpleActionGroup::get_base_type()
{
  return g_simple_action_group_get_type();
}


SimpleActionGroup::SimpleActionGroup()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Glib::Object(Glib::ConstructParams(simpleactiongroup_class_.init()))
{
  

}

Glib::RefPtr<SimpleActionGroup> SimpleActionGroup::create()
{
  return Glib::RefPtr<SimpleActionGroup>( new SimpleActionGroup() );
}

Glib::RefPtr<Action> SimpleActionGroup::lookup(const Glib::ustring& action_name)
{
  return Glib::wrap(g_simple_action_group_lookup(gobj(), action_name.c_str()));
}

void SimpleActionGroup::insert(const Glib::RefPtr<Action>& action)
{
  g_simple_action_group_insert(gobj(), Glib::unwrap(action)); 
}

void SimpleActionGroup::remove(const Glib::ustring& action_name)
{
  g_simple_action_group_remove(gobj(), action_name.c_str()); 
}


} // namespace Gio


