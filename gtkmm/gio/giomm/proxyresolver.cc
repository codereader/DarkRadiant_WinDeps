// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <giomm/proxyresolver.h>
#include <giomm/private/proxyresolver_p.h>


// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <utility>
#include <glibmm/error.h>
#include <glibmm/exceptionhandler.h>
#include <glibmm/vectorutils.h>
#include "slot_async.h"

namespace Gio
{

std::vector<Glib::ustring> ProxyResolver::lookup(const Glib::ustring& uri)
{
  GError* gerror = 0;
  std::vector<Glib::ustring> retvalue =
    Glib::ArrayHandler<Glib::ustring>::array_to_vector(g_proxy_resolver_lookup(gobj(), uri.c_str(), 0, &(gerror)), Glib::OWNERSHIP_DEEP);
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

void ProxyResolver::lookup_async(const Glib::ustring& uri, const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_proxy_resolver_lookup_async(gobj(),
    uri.c_str(),
    Glib::unwrap(cancellable),
    &SignalProxy_async_callback,
    slot_copy);
}
  
void ProxyResolver::lookup_async(const Glib::ustring& uri, const SlotAsyncReady& slot)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_proxy_resolver_lookup_async(gobj(),
    uri.c_str(),
    0,
    &SignalProxy_async_callback,
    slot_copy);
}

} //namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::ProxyResolver> wrap(GProxyResolver* object, bool take_copy)
{
  return Glib::RefPtr<Gio::ProxyResolver>( dynamic_cast<Gio::ProxyResolver*> (Glib::wrap_auto_interface<Gio::ProxyResolver> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gio
{


/* The *_Class implementation: */

const Glib::Interface_Class& ProxyResolver_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &ProxyResolver_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = g_proxy_resolver_get_type();
  }

  return *this;
}

void ProxyResolver_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 


}


Glib::ObjectBase* ProxyResolver_Class::wrap_new(GObject* object)
{
  return new ProxyResolver((GProxyResolver*)(object));
}


/* The implementation: */

ProxyResolver::ProxyResolver()
:
  Glib::Interface(proxyresolver_class_.init())
{}

ProxyResolver::ProxyResolver(GProxyResolver* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

ProxyResolver::ProxyResolver(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

ProxyResolver::~ProxyResolver()
{}

// static
void ProxyResolver::add_interface(GType gtype_implementer)
{
  proxyresolver_class_.init().add_interface(gtype_implementer);
}

ProxyResolver::CppClassType ProxyResolver::proxyresolver_class_; // initialize static member

GType ProxyResolver::get_type()
{
  return proxyresolver_class_.init().get_type();
}


GType ProxyResolver::get_base_type()
{
  return g_proxy_resolver_get_type();
}


Glib::RefPtr<ProxyResolver> ProxyResolver::get_default()
{
  return Glib::wrap(g_proxy_resolver_get_default());
}


bool ProxyResolver::is_supported() const
{
  return g_proxy_resolver_is_supported(const_cast<GProxyResolver*>(gobj()));
}

std::vector<Glib::ustring> ProxyResolver::lookup(const Glib::ustring& uri, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  std::vector<Glib::ustring> retvalue = Glib::ArrayHandler<Glib::ustring>::array_to_vector(g_proxy_resolver_lookup(gobj(), uri.c_str(), const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror)), Glib::OWNERSHIP_DEEP);
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}

std::vector<Glib::ustring> ProxyResolver::lookup_finish(const Glib::RefPtr<AsyncResult>& result)
{
  GError* gerror = 0;
  std::vector<Glib::ustring> retvalue = Glib::ArrayHandler<Glib::ustring>::array_to_vector(g_proxy_resolver_lookup_finish(gobj(), Glib::unwrap(result), &(gerror)), Glib::OWNERSHIP_DEEP);
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}


} // namespace Gio


