// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <giomm/applicationcommandline.h>
#include <giomm/private/applicationcommandline_p.h>


/* Copyright (C) 2010 Jonathon Jongsma <jonathon@quotidian.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
#include <gio/gio.h>
#include <glibmm/vectorutils.h>

namespace Gio
{

void ApplicationCommandLine::print(const Glib::ustring& message)
{
  g_application_command_line_print(gobj(), "%s", message.c_str()); 
}

void ApplicationCommandLine::printerr(const Glib::ustring& message)
{
  g_application_command_line_printerr(gobj(), "%s", message.c_str()); 
}

} //namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::ApplicationCommandLine> wrap(GApplicationCommandLine* object, bool take_copy)
{
  return Glib::RefPtr<Gio::ApplicationCommandLine>( dynamic_cast<Gio::ApplicationCommandLine*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& ApplicationCommandLine_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ApplicationCommandLine_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_application_command_line_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void ApplicationCommandLine_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* ApplicationCommandLine_Class::wrap_new(GObject* object)
{
  return new ApplicationCommandLine((GApplicationCommandLine*)object);
}


/* The implementation: */

GApplicationCommandLine* ApplicationCommandLine::gobj_copy()
{
  reference();
  return gobj();
}

ApplicationCommandLine::ApplicationCommandLine(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

ApplicationCommandLine::ApplicationCommandLine(GApplicationCommandLine* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


ApplicationCommandLine::~ApplicationCommandLine()
{}


ApplicationCommandLine::CppClassType ApplicationCommandLine::applicationcommandline_class_; // initialize static member

GType ApplicationCommandLine::get_type()
{
  return applicationcommandline_class_.init().get_type();
}


GType ApplicationCommandLine::get_base_type()
{
  return g_application_command_line_get_type();
}


ApplicationCommandLine::ApplicationCommandLine()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Glib::Object(Glib::ConstructParams(applicationcommandline_class_.init()))
{
  

}

char** ApplicationCommandLine::get_arguments(int& argc) const
{
  return g_application_command_line_get_arguments(const_cast<GApplicationCommandLine*>(gobj()), &(argc));
}

std::string ApplicationCommandLine::get_cwd() const
{
  return Glib::convert_const_gchar_ptr_to_stdstring(g_application_command_line_get_cwd(const_cast<GApplicationCommandLine*>(gobj())));
}

std::vector<std::string> ApplicationCommandLine::get_environ() const
{
  return Glib::ArrayHandler<std::string>::array_to_vector(g_application_command_line_get_environ(const_cast<GApplicationCommandLine*>(gobj())), Glib::OWNERSHIP_NONE);
}

std::string ApplicationCommandLine::getenv(const Glib::ustring& name) const
{
  return Glib::convert_const_gchar_ptr_to_stdstring(g_application_command_line_getenv(const_cast<GApplicationCommandLine*>(gobj()), name.c_str()));
}

bool ApplicationCommandLine::is_remote() const
{
  return g_application_command_line_get_is_remote(const_cast<GApplicationCommandLine*>(gobj()));
}

Glib::Variant< std::map<Glib::ustring, Glib::VariantBase> > ApplicationCommandLine::get_platform_data() const
{
  return Glib::Variant< std::map<Glib::ustring, Glib::VariantBase> >(g_application_command_line_get_platform_data(const_cast<GApplicationCommandLine*>(gobj())));
}

void ApplicationCommandLine::set_exit_status(int exit_status)
{
  g_application_command_line_set_exit_status(gobj(), exit_status); 
}

int ApplicationCommandLine::get_exit_status() const
{
  return g_application_command_line_get_exit_status(const_cast<GApplicationCommandLine*>(gobj()));
}


} // namespace Gio


