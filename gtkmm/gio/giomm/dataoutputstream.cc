// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <giomm/dataoutputstream.h>
#include <giomm/private/dataoutputstream_p.h>


// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <glibmm/error.h>

namespace Gio
{

bool DataOutputStream::put_byte(guchar data)
{
  GError* gerror = 0;
  const guchar retvalue = g_data_output_stream_put_byte(gobj(), data, 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool DataOutputStream::put_int16(gint16 data)
{
  GError* gerror = 0;
  const gint16 retvalue = g_data_output_stream_put_int16(gobj(), data, 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool DataOutputStream::put_uint16(guint16 data)
{
  GError* gerror = 0;
  const guint16 retvalue = g_data_output_stream_put_uint16(gobj(), data, 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool DataOutputStream::put_int32(gint32 data)
{
  GError* gerror = 0;
  const gint32 retvalue = g_data_output_stream_put_int32(gobj(), data, 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool DataOutputStream::put_uint32(guint32 data)
{
  GError* gerror = 0;
  const guint32 retvalue = g_data_output_stream_put_uint32(gobj(), data, 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool DataOutputStream::put_int64(gint64 data)
{
  GError* gerror = 0;
  const gint64 retvalue = g_data_output_stream_put_int64(gobj(), data, 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool DataOutputStream::put_uint64(guint64 data)
{
  GError* gerror = 0;
  guint64 retvalue = g_data_output_stream_put_uint64(gobj(), data, 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool DataOutputStream::put_string(std::string str)
{
  GError* gerror = 0;
  const bool retval = g_data_output_stream_put_string(gobj(),
                                                str.c_str (),
                                                0,
                                                &gerror);
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
    return retval;
}


} // namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::DataOutputStream> wrap(GDataOutputStream* object, bool take_copy)
{
  return Glib::RefPtr<Gio::DataOutputStream>( dynamic_cast<Gio::DataOutputStream*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& DataOutputStream_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &DataOutputStream_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_data_output_stream_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void DataOutputStream_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* DataOutputStream_Class::wrap_new(GObject* object)
{
  return new DataOutputStream((GDataOutputStream*)object);
}


/* The implementation: */

GDataOutputStream* DataOutputStream::gobj_copy()
{
  reference();
  return gobj();
}

DataOutputStream::DataOutputStream(const Glib::ConstructParams& construct_params)
:
  Gio::BufferedOutputStream(construct_params)
{

}

DataOutputStream::DataOutputStream(GDataOutputStream* castitem)
:
  Gio::BufferedOutputStream((GBufferedOutputStream*)(castitem))
{}


DataOutputStream::~DataOutputStream()
{}


DataOutputStream::CppClassType DataOutputStream::dataoutputstream_class_; // initialize static member

GType DataOutputStream::get_type()
{
  return dataoutputstream_class_.init().get_type();
}


GType DataOutputStream::get_base_type()
{
  return g_data_output_stream_get_type();
}


DataOutputStream::DataOutputStream(const Glib::RefPtr<OutputStream>& base_stream)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gio::BufferedOutputStream(Glib::ConstructParams(dataoutputstream_class_.init(), "base_stream", const_cast<GOutputStream*>(Glib::unwrap(base_stream)), static_cast<char*>(0)))
{
  

}

Glib::RefPtr<DataOutputStream> DataOutputStream::create(const Glib::RefPtr<OutputStream>& base_stream)
{
  return Glib::RefPtr<DataOutputStream>( new DataOutputStream(base_stream) );
}

void DataOutputStream::set_byte_order(DataStreamByteOrder order)
{
  g_data_output_stream_set_byte_order(gobj(), ((GDataStreamByteOrder)(order))); 
}

DataStreamByteOrder DataOutputStream::get_byte_order() const
{
  return ((DataStreamByteOrder)(g_data_output_stream_get_byte_order(const_cast<GDataOutputStream*>(gobj()))));
}

bool DataOutputStream::put_byte(guchar data, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_data_output_stream_put_byte(gobj(), data, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}

bool DataOutputStream::put_int16(gint16 data, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_data_output_stream_put_int16(gobj(), data, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}

bool DataOutputStream::put_uint16(guint16 data, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_data_output_stream_put_uint16(gobj(), data, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}

bool DataOutputStream::put_int32(gint32 data, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_data_output_stream_put_int32(gobj(), data, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}

bool DataOutputStream::put_uint32(guint32 data, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_data_output_stream_put_uint32(gobj(), data, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}

bool DataOutputStream::put_int64(gint64 data, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_data_output_stream_put_int64(gobj(), data, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}

bool DataOutputStream::put_uint64(guint64 data, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_data_output_stream_put_uint64(gobj(), data, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}

bool DataOutputStream::put_string(std::string str, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_data_output_stream_put_string(gobj(), str.c_str(), const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;

}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< DataStreamByteOrder > DataOutputStream::property_byte_order() 
{
  return Glib::PropertyProxy< DataStreamByteOrder >(this, "byte-order");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< DataStreamByteOrder > DataOutputStream::property_byte_order() const
{
  return Glib::PropertyProxy_ReadOnly< DataStreamByteOrder >(this, "byte-order");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gio


