// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GDKMM_PIXBUFFORMAT_H
#define _GDKMM_PIXBUFFORMAT_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* $Id: pixbufformat.hg,v 1.4 2005/01/05 17:30:16 murrayc Exp $ */

/* Copyright (C) 2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */


#include <gdkmmconfig.h>
#include <glibmm/value.h>
#include <vector>

#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C" { typedef struct _GdkPixbufFormat GdkPixbufFormat; }
#endif

namespace Gdk
{

class PixbufFormat
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef PixbufFormat CppObjectType;
  typedef GdkPixbufFormat BaseObjectType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type() G_GNUC_CONST;


  explicit PixbufFormat(GdkPixbufFormat* gobject, bool make_a_copy = true);

  PixbufFormat(const PixbufFormat& other);
  PixbufFormat& operator=(const PixbufFormat& other);

  ~PixbufFormat();

  void swap(PixbufFormat& other);

  ///Provides access to the underlying C instance.
  GdkPixbufFormat*       gobj()       { return gobject_; }

  ///Provides access to the underlying C instance.
  const GdkPixbufFormat* gobj() const { return gobject_; }

  ///Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs.
  GdkPixbufFormat* gobj_copy() const;

protected:
  GdkPixbufFormat* gobject_;

private:

  
public:
  
  PixbufFormat();

  
  Glib::ustring get_name() const;
  
  Glib::ustring get_description() const;

 
  std::vector<Glib::ustring> get_mime_types() const;
  
  std::vector<Glib::ustring> get_extensions() const;
  
  bool is_writable() const;

  
  bool is_scalable() const;
  
  bool is_disabled() const;
  
  void set_disabled(bool disabled =  true);
  
  Glib::ustring get_license() const;


};

#ifndef DOXYGEN_SHOULD_SKIP_THIS
struct PixbufFormatTraits
{
  typedef PixbufFormat  CppType;
  typedef const GdkPixbufFormat*      CType;
  typedef GdkPixbufFormat*            CTypeNonConst;

  static CType   to_c_type      (const CppType& obj) { return obj.gobj();     }
  static CType   to_c_type      (CType          ptr) { return ptr;                   }
  static CppType to_cpp_type    (CType          ptr) { return PixbufFormat(const_cast<GdkPixbufFormat*>(ptr), true); }
  static void    release_c_type (CType          /* ptr */) { /* Doesn't happen */ }
};
#endif //DOXYGEN_SHOULD_SKIP_THIS

} // namespace Gdk


namespace Gdk
{

/** @relates Gdk::PixbufFormat
 * @param lhs The left-hand side
 * @param rhs The right-hand side
 */
inline void swap(PixbufFormat& lhs, PixbufFormat& rhs)
  { lhs.swap(rhs); }

} // namespace Gdk

namespace Glib
{

/** A Glib::wrap() method for this object.
 * 
 * @param object The C instance.
 * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
 * @result A C++ instance that wraps this C instance.
 *
 * @relates Gdk::PixbufFormat
 */
Gdk::PixbufFormat wrap(GdkPixbufFormat* object, bool take_copy = false);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
template <>
class Value<Gdk::PixbufFormat> : public Glib::Value_Boxed<Gdk::PixbufFormat>
{};
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

} // namespace Glib


#endif /* _GDKMM_PIXBUFFORMAT_H */

