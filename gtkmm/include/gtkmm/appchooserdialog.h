// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKMM_APPCHOOSERDIALOG_H
#define _GTKMM_APPCHOOSERDIALOG_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 2011 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/appchooser.h>
#include <gtkmm/dialog.h>
#include <gtkmm/menu.h>
#include <giomm/file.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkAppChooserDialog GtkAppChooserDialog;
typedef struct _GtkAppChooserDialogClass GtkAppChooserDialogClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class AppChooserDialog_Class; } // namespace Gtk
namespace Gtk
{

//TODO: The AppChooser content-type is not documented properly: https://bugzilla.gnome.org/show_bug.cgi?id=650012

/** An application chooser dialog.
 *
 * This dialog shows an AppChooserWidget inside a Dialog.
 *
 * Note that AppChooserDialog does not have any interesting methods of its own.
 * Instead, you should get the embedded AppChooserWidget using get_widget() and
 * call its methods if the generic AppChooser base class API is not sufficient for your needs.
 *
 * The AppChooserDialog dialog looks like this:
 * @image html appchooserbutton1.png
 *
 * @ingroup Dialogs
 *
 * @newin{3,0}
 */

class AppChooserDialog
  : public Dialog,
    public AppChooser
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef AppChooserDialog CppObjectType;
  typedef AppChooserDialog_Class CppClassType;
  typedef GtkAppChooserDialog BaseObjectType;
  typedef GtkAppChooserDialogClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~AppChooserDialog();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class AppChooserDialog_Class;
  static CppClassType appchooserdialog_class_;

  // noncopyable
  AppChooserDialog(const AppChooserDialog&);
  AppChooserDialog& operator=(const AppChooserDialog&);

protected:
  explicit AppChooserDialog(const Glib::ConstructParams& construct_params);
  explicit AppChooserDialog(GtkAppChooserDialog* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkAppChooserDialog*       gobj()       { return reinterpret_cast<GtkAppChooserDialog*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkAppChooserDialog* gobj() const { return reinterpret_cast<GtkAppChooserDialog*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

  
public:

  explicit AppChooserDialog(const Glib::ustring& content_type);

  AppChooserDialog(const Glib::ustring& content_type, Gtk::Window& parent);
  

  explicit AppChooserDialog(const Glib::RefPtr<Gio::File>& file);

  AppChooserDialog(const Glib::RefPtr<Gio::File>& file, Gtk::Window& parent);
  

  /** Returns the Gtk::AppChooserWidget of this dialog.
   * 
   * @newin{3,0}
   * @return The Gtk::AppChooserWidget of @a self.
   */
  Widget* get_widget();
  
  /** Returns the Gtk::AppChooserWidget of this dialog.
   * 
   * @newin{3,0}
   * @return The Gtk::AppChooserWidget of @a self.
   */
  const Widget* get_widget() const;

  
  /** Sets the text to display at the top of the dialog.
   * If the heading is not set, the dialog displays a default text.
   * @param heading A string containing Pango markup.
   */
  void set_heading(const Glib::ustring& heading);
  
  /** Returns the text to display at the top of the dialog.
   * @return The text to display at the top of the dialog, or <tt>0</tt>, in which
   * case a default text is displayed.
   */
  Glib::ustring get_heading() const;

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The GFile used by the app chooser dialog.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::File> > property_gfile() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The text to show at the top of the dialog.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_heading() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The text to show at the top of the dialog.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_heading() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


};


} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::AppChooserDialog
   */
  Gtk::AppChooserDialog* wrap(GtkAppChooserDialog* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_APPCHOOSERDIALOG_H */

