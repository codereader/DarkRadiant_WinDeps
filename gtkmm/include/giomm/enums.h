// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GIOMM_ENUMS_H
#define _GIOMM_ENUMS_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <glibmm/value.h>


namespace Gio
{

/** @addtogroup giommEnums giomm Enums and Flags */

/**
 * @ingroup giommEnums
 */
enum DataStreamByteOrder
{
  DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
  DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
  DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
};


/**
 * @ingroup giommEnums
 */
enum DataStreamNewlineType
{
  DATA_STREAM_NEWLINE_TYPE_LF,
  DATA_STREAM_NEWLINE_TYPE_CR,
  DATA_STREAM_NEWLINE_TYPE_CR_LF,
  DATA_STREAM_NEWLINE_TYPE_ANY
};


/**
 * @ingroup giommEnums
 */
enum ErrorEnum
{
  IO_ERROR_FAILED,
  IO_ERROR_NOT_FOUND,
  IO_ERROR_EXISTS,
  IO_ERROR_IS_DIRECTORY,
  IO_ERROR_NOT_DIRECTORY,
  IO_ERROR_NOT_EMPTY,
  IO_ERROR_NOT_REGULAR_FILE,
  IO_ERROR_NOT_SYMBOLIC_LINK,
  IO_ERROR_NOT_MOUNTABLE_FILE,
  IO_ERROR_FILENAME_TOO_LONG,
  IO_ERROR_INVALID_FILENAME,
  IO_ERROR_TOO_MANY_LINKS,
  IO_ERROR_NO_SPACE,
  IO_ERROR_INVALID_ARGUMENT,
  IO_ERROR_PERMISSION_DENIED,
  IO_ERROR_NOT_SUPPORTED,
  IO_ERROR_NOT_MOUNTED,
  IO_ERROR_ALREADY_MOUNTED,
  IO_ERROR_CLOSED,
  IO_ERROR_CANCELLED,
  IO_ERROR_PENDING,
  IO_ERROR_READ_ONLY,
  IO_ERROR_CANT_CREATE_BACKUP,
  IO_ERROR_WRONG_ETAG,
  IO_ERROR_TIMED_OUT,
  IO_ERROR_WOULD_RECURSE,
  IO_ERROR_BUSY,
  IO_ERROR_WOULD_BLOCK,
  IO_ERROR_HOST_NOT_FOUND,
  IO_ERROR_HOST_WAS_NOT_FOUND = IO_ERROR_HOST_NOT_FOUND,
  IO_ERROR_WOULD_MERGE,
  IO_ERROR_FAILED_HANDLED,
  IO_ERROR_TOO_MANY_OPEN_FILES,
  IO_ERROR_NOT_INITIALIZED,
  IO_ERROR_ADDRESS_IN_USE,
  IO_ERROR_PARTIAL_INPUT,
  IO_ERROR_INVALID_DATA,
  IO_ERROR_DBUS_ERROR,
  IO_ERROR_HOST_UNREACHABLE,
  IO_ERROR_NETWORK_UNREACHABLE,
  IO_ERROR_CONNECTION_REFUSED,
  IO_ERROR_PROXY_FAILED,
  IO_ERROR_PROXY_AUTH_FAILED,
  IO_ERROR_PROXY_NEED_AUTH,
  IO_ERROR_PROXY_NOT_ALLOWED
};


/**
 * @ingroup giommEnums
 */
enum SocketFamily
{
  SOCKET_FAMILY_INVALID = 0,
  SOCKET_FAMILY_UNIX = GLIB_SYSDEF_AF_UNIX,
  SOCKET_FAMILY_IPV4 = GLIB_SYSDEF_AF_INET,
  SOCKET_FAMILY_IPV6 = GLIB_SYSDEF_AF_INET6
};

} // namespace Gio


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gio::SocketFamily> : public Glib::Value_Enum<Gio::SocketFamily>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gio
{


} // namespace Gio


#endif /* _GIOMM_ENUMS_H */

