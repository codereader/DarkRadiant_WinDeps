// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/aboutdialog.h>
#include <gtkmm/private/aboutdialog_p.h>


// -*- c++ -*-
/* $Id: aboutdialog.ccg,v 1.5 2006/06/13 17:24:35 murrayc Exp $ */

/*
 *
 * Copyright 2004 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <glibmm/vectorutils.h>

#include <gtk/gtk.h>

namespace Gtk
{

void AboutDialog::unset_license()
{
  gtk_about_dialog_set_license(gobj(), 0); 
}

void AboutDialog::set_logo_default()
{
  gtk_about_dialog_set_logo(gobj(), 0); 
}

} // namespace Gtk


namespace
{


static gboolean AboutDialog_signal_activate_link_callback(GtkAboutDialog* self, const gchar* p0,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< bool,const std::string& > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        return static_cast<int>((*static_cast<SlotType*>(slot))(Glib::convert_const_gchar_ptr_to_stdstring(p0)
));
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gboolean RType;
  return RType();
}

static gboolean AboutDialog_signal_activate_link_notify_callback(GtkAboutDialog* self, const gchar* p0, void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,const std::string& > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::convert_const_gchar_ptr_to_stdstring(p0)
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gboolean RType;
  return RType();
}

static const Glib::SignalProxyInfo AboutDialog_signal_activate_link_info =
{
  "activate-link",
  (GCallback) &AboutDialog_signal_activate_link_callback,
  (GCallback) &AboutDialog_signal_activate_link_notify_callback
};


} // anonymous namespace

// static
GType Glib::Value<Gtk::License>::value_type()
{
  return gtk_license_get_type();
}


namespace Glib
{

Gtk::AboutDialog* wrap(GtkAboutDialog* object, bool take_copy)
{
  return dynamic_cast<Gtk::AboutDialog *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& AboutDialog_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &AboutDialog_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_about_dialog_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void AboutDialog_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->activate_link = &activate_link_callback;
}


gboolean AboutDialog_Class::activate_link_callback(GtkAboutDialog* self, const gchar* p0)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->on_activate_link(Glib::convert_const_gchar_ptr_to_stdstring(p0)
));
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->activate_link)
    return (*base->activate_link)(self, p0);

  typedef gboolean RType;
  return RType();
}


Glib::ObjectBase* AboutDialog_Class::wrap_new(GObject* o)
{
  return new AboutDialog((GtkAboutDialog*)(o)); //top-level windows can not be manage()ed.

}


/* The implementation: */

AboutDialog::AboutDialog(const Glib::ConstructParams& construct_params)
:
  Gtk::Dialog(construct_params)
{
  }

AboutDialog::AboutDialog(GtkAboutDialog* castitem)
:
  Gtk::Dialog((GtkDialog*)(castitem))
{
  }

AboutDialog::~AboutDialog()
{
  destroy_();
}

AboutDialog::CppClassType AboutDialog::aboutdialog_class_; // initialize static member

GType AboutDialog::get_type()
{
  return aboutdialog_class_.init().get_type();
}


GType AboutDialog::get_base_type()
{
  return gtk_about_dialog_get_type();
}


AboutDialog::AboutDialog()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Dialog(Glib::ConstructParams(aboutdialog_class_.init()))
{
  

}

Glib::ustring AboutDialog::get_program_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_program_name(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_program_name(const Glib::ustring& name)
{
  gtk_about_dialog_set_program_name(gobj(), name.c_str()); 
}

Glib::ustring AboutDialog::get_version() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_version(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_version(const Glib::ustring& version)
{
  gtk_about_dialog_set_version(gobj(), version.c_str()); 
}

Glib::ustring AboutDialog::get_copyright() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_copyright(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_copyright(const Glib::ustring& copyright)
{
  gtk_about_dialog_set_copyright(gobj(), copyright.c_str()); 
}

Glib::ustring AboutDialog::get_comments() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_comments(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_comments(const Glib::ustring& comments)
{
  gtk_about_dialog_set_comments(gobj(), comments.c_str()); 
}

Glib::ustring AboutDialog::get_license() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_license(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_license(const Glib::ustring& license)
{
  gtk_about_dialog_set_license(gobj(), license.c_str()); 
}

License AboutDialog::get_license_type() const
{
  return ((License)(gtk_about_dialog_get_license_type(const_cast<GtkAboutDialog*>(gobj()))));
}

void AboutDialog::set_license_type(License license_type)
{
  gtk_about_dialog_set_license_type(gobj(), ((GtkLicense)(license_type))); 
}

Glib::ustring AboutDialog::get_website() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_website(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_website(const Glib::ustring& website)
{
  gtk_about_dialog_set_website(gobj(), website.c_str()); 
}

Glib::ustring AboutDialog::get_website_label() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_website_label(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_website_label(const Glib::ustring& website_label)
{
  gtk_about_dialog_set_website_label(gobj(), website_label.c_str()); 
}

std::vector<Glib::ustring> AboutDialog::get_authors() const
{
  return Glib::ArrayHandler<Glib::ustring>::array_to_vector(gtk_about_dialog_get_authors(const_cast<GtkAboutDialog*>(gobj())), Glib::OWNERSHIP_NONE);
}

void AboutDialog::set_authors(const std::vector<Glib::ustring>& authors) const
{
  gtk_about_dialog_set_authors(const_cast<GtkAboutDialog*>(gobj()), Glib::ArrayHandler<Glib::ustring>::vector_to_array(authors).data ()); 
}

std::vector<Glib::ustring> AboutDialog::get_documenters() const
{
  return Glib::ArrayHandler<Glib::ustring>::array_to_vector(gtk_about_dialog_get_documenters(const_cast<GtkAboutDialog*>(gobj())), Glib::OWNERSHIP_NONE);
}

void AboutDialog::set_documenters(const std::vector<Glib::ustring>& documenters)
{
  gtk_about_dialog_set_documenters(gobj(), Glib::ArrayHandler<Glib::ustring>::vector_to_array(documenters).data ()); 
}

std::vector<Glib::ustring> AboutDialog::get_artists() const
{
  return Glib::ArrayHandler<Glib::ustring>::array_to_vector(gtk_about_dialog_get_artists(const_cast<GtkAboutDialog*>(gobj())), Glib::OWNERSHIP_NONE);
}

void AboutDialog::set_artists(const std::vector<Glib::ustring>& artists)
{
  gtk_about_dialog_set_artists(gobj(), Glib::ArrayHandler<Glib::ustring>::vector_to_array(artists).data ()); 
}

Glib::ustring AboutDialog::get_translator_credits() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_translator_credits(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_translator_credits(const Glib::ustring& translator_credits)
{
  gtk_about_dialog_set_translator_credits(gobj(), translator_credits.c_str()); 
}

Glib::RefPtr<Gdk::Pixbuf> AboutDialog::get_logo()
{
  return Glib::wrap(gtk_about_dialog_get_logo(gobj()));
}

Glib::RefPtr<const Gdk::Pixbuf> AboutDialog::get_logo() const
{
  return const_cast<AboutDialog*>(this)->get_logo();
}

void AboutDialog::set_logo(const Glib::RefPtr<Gdk::Pixbuf>& logo)
{
  gtk_about_dialog_set_logo(gobj(), Glib::unwrap(logo)); 
}

Glib::ustring AboutDialog::get_logo_icon_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_about_dialog_get_logo_icon_name(const_cast<GtkAboutDialog*>(gobj())));
}

void AboutDialog::set_logo_icon_name(const Glib::ustring& icon_name)
{
  gtk_about_dialog_set_logo_icon_name(gobj(), icon_name.c_str()); 
}

bool AboutDialog::get_wrap_license() const
{
  return gtk_about_dialog_get_wrap_license(const_cast<GtkAboutDialog*>(gobj()));
}

void AboutDialog::set_wrap_license(bool wrap_license)
{
  gtk_about_dialog_set_wrap_license(gobj(), static_cast<int>(wrap_license)); 
}

void AboutDialog::add_credit_section(const Glib::ustring& section_name, const std::vector<Glib::ustring>& people)
{
  gtk_about_dialog_add_credit_section(gobj(), section_name.c_str(), Glib::ArrayHandler<Glib::ustring>::vector_to_array(people).data ()); 
}


Glib::SignalProxy1< bool,const std::string& > AboutDialog::signal_activate_link()
{
  return Glib::SignalProxy1< bool,const std::string& >(this, &AboutDialog_signal_activate_link_info);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > AboutDialog::property_program_name() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "program-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > AboutDialog::property_program_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "program-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > AboutDialog::property_version() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "version");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > AboutDialog::property_version() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "version");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > AboutDialog::property_copyright() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "copyright");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > AboutDialog::property_copyright() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "copyright");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > AboutDialog::property_comments() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "comments");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > AboutDialog::property_comments() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "comments");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > AboutDialog::property_website() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "website");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > AboutDialog::property_website() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "website");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > AboutDialog::property_website_label() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "website-label");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > AboutDialog::property_website_label() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "website-label");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > AboutDialog::property_license() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "license");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > AboutDialog::property_license() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "license");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< License > AboutDialog::property_license_type() 
{
  return Glib::PropertyProxy< License >(this, "license-type");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< License > AboutDialog::property_license_type() const
{
  return Glib::PropertyProxy_ReadOnly< License >(this, "license-type");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< std::vector<Glib::ustring> > AboutDialog::property_authors() 
{
  return Glib::PropertyProxy< std::vector<Glib::ustring> >(this, "authors");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< std::vector<Glib::ustring> > AboutDialog::property_authors() const
{
  return Glib::PropertyProxy_ReadOnly< std::vector<Glib::ustring> >(this, "authors");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< std::vector<Glib::ustring> > AboutDialog::property_documenters() 
{
  return Glib::PropertyProxy< std::vector<Glib::ustring> >(this, "documenters");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< std::vector<Glib::ustring> > AboutDialog::property_documenters() const
{
  return Glib::PropertyProxy_ReadOnly< std::vector<Glib::ustring> >(this, "documenters");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< std::vector<Glib::ustring> > AboutDialog::property_translator_credits() 
{
  return Glib::PropertyProxy< std::vector<Glib::ustring> >(this, "translator-credits");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< std::vector<Glib::ustring> > AboutDialog::property_translator_credits() const
{
  return Glib::PropertyProxy_ReadOnly< std::vector<Glib::ustring> >(this, "translator-credits");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< std::vector<Glib::ustring> > AboutDialog::property_artists() 
{
  return Glib::PropertyProxy< std::vector<Glib::ustring> >(this, "artists");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< std::vector<Glib::ustring> > AboutDialog::property_artists() const
{
  return Glib::PropertyProxy_ReadOnly< std::vector<Glib::ustring> >(this, "artists");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> > AboutDialog::property_logo() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> >(this, "logo");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> > AboutDialog::property_logo() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> >(this, "logo");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > AboutDialog::property_logo_icon_name() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "logo-icon-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > AboutDialog::property_logo_icon_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "logo-icon-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< bool > AboutDialog::property_wrap_license() 
{
  return Glib::PropertyProxy< bool >(this, "wrap-license");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< bool > AboutDialog::property_wrap_license() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "wrap-license");
}
#endif //GLIBMM_PROPERTIES_ENABLED


bool Gtk::AboutDialog::on_activate_link(const std::string& uri)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->activate_link)
    return (*base->activate_link)(gobj(),uri.c_str());

  typedef bool RType;
  return RType();
}


} // namespace Gtk


