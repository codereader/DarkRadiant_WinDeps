// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/cellareacontext.h>
#include <gtkmm/private/cellareacontext_p.h>


/* Copyright (C) 2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/cellarea.h>
#include <gtk/gtk.h>

namespace Gtk
{

} /* namespace Gtk */

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::CellAreaContext> wrap(GtkCellAreaContext* object, bool take_copy)
{
  return Glib::RefPtr<Gtk::CellAreaContext>( dynamic_cast<Gtk::CellAreaContext*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& CellAreaContext_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &CellAreaContext_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_cell_area_context_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void CellAreaContext_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* CellAreaContext_Class::wrap_new(GObject* object)
{
  return new CellAreaContext((GtkCellAreaContext*)object);
}


/* The implementation: */

GtkCellAreaContext* CellAreaContext::gobj_copy()
{
  reference();
  return gobj();
}

CellAreaContext::CellAreaContext(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

CellAreaContext::CellAreaContext(GtkCellAreaContext* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


CellAreaContext::~CellAreaContext()
{}


CellAreaContext::CppClassType CellAreaContext::cellareacontext_class_; // initialize static member

GType CellAreaContext::get_type()
{
  return cellareacontext_class_.init().get_type();
}


GType CellAreaContext::get_base_type()
{
  return gtk_cell_area_context_get_type();
}


Glib::RefPtr<CellArea> CellAreaContext::get_area()
{

  Glib::RefPtr<CellArea> retvalue = Glib::wrap(gtk_cell_area_context_get_area(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const CellArea> CellAreaContext::get_area() const
{
  return const_cast<CellAreaContext*>(this)->get_area();
}

void CellAreaContext::allocate(int width, int height)
{
  gtk_cell_area_context_allocate(gobj(), width, height); 
}

void CellAreaContext::reset()
{
  gtk_cell_area_context_reset(gobj()); 
}

void CellAreaContext::get_preferred_width(int& minimum_width, int& natural_width) const
{
  gtk_cell_area_context_get_preferred_width(const_cast<GtkCellAreaContext*>(gobj()), &(minimum_width), &(natural_width)); 
}

void CellAreaContext::get_preferred_height(int& minimum_height, int& natural_height) const
{
  gtk_cell_area_context_get_preferred_height(const_cast<GtkCellAreaContext*>(gobj()), &(minimum_height), &(natural_height)); 
}

void CellAreaContext::get_preferred_height_for_width(int width, int& minimum_height, int& natural_height) const
{
  gtk_cell_area_context_get_preferred_height_for_width(const_cast<GtkCellAreaContext*>(gobj()), width, &(minimum_height), &(natural_height)); 
}

void CellAreaContext::get_preferred_width_for_height(int height, int& minimum_width, int& natural_width) const
{
  gtk_cell_area_context_get_preferred_width_for_height(const_cast<GtkCellAreaContext*>(gobj()), height, &(minimum_width), &(natural_width)); 
}

void CellAreaContext::get_allocation(int& width, int& height) const
{
  gtk_cell_area_context_get_allocation(const_cast<GtkCellAreaContext*>(gobj()), &(width), &(height)); 
}

void CellAreaContext::push_preferred_width(int minimum_width, int natural_width)
{
  gtk_cell_area_context_push_preferred_width(gobj(), minimum_width, natural_width); 
}

void CellAreaContext::push_preferred_height(int minimum_height, int natural_height)
{
  gtk_cell_area_context_push_preferred_height(gobj(), minimum_height, natural_height); 
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< CellArea* > CellAreaContext::property_area() const
{
  return Glib::PropertyProxy_ReadOnly< CellArea* >(this, "area");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< int > CellAreaContext::property_minimum_width() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "minimum-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< int > CellAreaContext::property_natural_width() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "natural-width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< int > CellAreaContext::property_minimum_height() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "minimum-height");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< int > CellAreaContext::property_natural_height() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "natural-height");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gtk


