// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/buttonbox.h>
#include <gtkmm/private/buttonbox_p.h>


// -*- c++ -*-
/* $Id: buttonbox.ccg,v 1.1 2003/01/21 13:38:43 murrayc Exp $ */

/*
 *
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>

namespace Gtk
{


} // namespace Gtk

namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::ButtonBox* wrap(GtkButtonBox* object, bool take_copy)
{
  return dynamic_cast<Gtk::ButtonBox *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& ButtonBox_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ButtonBox_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_button_box_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Orientable::add_interface(get_type());

  }

  return *this;
}


void ButtonBox_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* ButtonBox_Class::wrap_new(GObject* o)
{
  return manage(new ButtonBox((GtkButtonBox*)(o)));

}


/* The implementation: */

ButtonBox::ButtonBox(const Glib::ConstructParams& construct_params)
:
  Gtk::Box(construct_params)
{
  }

ButtonBox::ButtonBox(GtkButtonBox* castitem)
:
  Gtk::Box((GtkBox*)(castitem))
{
  }

ButtonBox::~ButtonBox()
{
  destroy_();
}

ButtonBox::CppClassType ButtonBox::buttonbox_class_; // initialize static member

GType ButtonBox::get_type()
{
  return buttonbox_class_.init().get_type();
}


GType ButtonBox::get_base_type()
{
  return gtk_button_box_get_type();
}


ButtonBox::ButtonBox(Orientation orientation)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Box(Glib::ConstructParams(buttonbox_class_.init(), "orientation", ((GtkOrientation)(orientation)), static_cast<char*>(0)))
{
  

}

ButtonBoxStyle ButtonBox::get_layout() const
{
  return ((ButtonBoxStyle)(gtk_button_box_get_layout(const_cast<GtkButtonBox*>(gobj()))));
}

void ButtonBox::set_layout(ButtonBoxStyle layout_style)
{
  gtk_button_box_set_layout(gobj(), ((GtkButtonBoxStyle)(layout_style))); 
}

void ButtonBox::set_child_secondary(Widget& child, bool is_secondary)
{
  gtk_button_box_set_child_secondary(gobj(), (child).gobj(), static_cast<int>(is_secondary)); 
}

bool ButtonBox::get_child_secondary(const Gtk::Widget& child) const
{
  return gtk_button_box_get_child_secondary(const_cast<GtkButtonBox*>(gobj()), const_cast<GtkWidget*>(child.gobj()));
}

bool ButtonBox::get_child_non_homogeneous(const Gtk::Widget& child) const
{
  return gtk_button_box_get_child_non_homogeneous(const_cast<GtkButtonBox*>(gobj()), const_cast<GtkWidget*>(child.gobj()));
}

void ButtonBox::set_child_non_homogeneous(Gtk::Widget& child, bool non_homogeneous)
{
  gtk_button_box_set_child_non_homogeneous(gobj(), (child).gobj(), static_cast<int>(non_homogeneous)); 
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< ButtonBoxStyle > ButtonBox::property_layout_style() 
{
  return Glib::PropertyProxy< ButtonBoxStyle >(this, "layout-style");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< ButtonBoxStyle > ButtonBox::property_layout_style() const
{
  return Glib::PropertyProxy_ReadOnly< ButtonBoxStyle >(this, "layout-style");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gtk


