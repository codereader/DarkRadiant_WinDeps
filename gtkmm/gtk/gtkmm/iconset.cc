// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/iconset.h>
#include <gtkmm/private/iconset_p.h>


// -*- c++ -*-
/* $Id: iconset.ccg,v 1.1 2003/01/21 13:40:26 murrayc Exp $ */

/*
 *
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/widget.h>
#include <gtk/gtk.h>

namespace Gtk
{

Glib::RefPtr<IconSet> IconSet::create(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf)
{
  // See the comment at the top of this file, if you want to know why the cast works.
  return Glib::RefPtr<IconSet>(reinterpret_cast<IconSet*>(gtk_icon_set_new_from_pixbuf(Glib::unwrap(pixbuf))));
}

std::vector<IconSize> IconSet::get_sizes() const
{
  GtkIconSize* pSizes = 0;
  int n_sizes = 0;
  gtk_icon_set_get_sizes(const_cast<GtkIconSet*>(gobj()), &pSizes, &n_sizes);

  return Glib::ArrayHandler<IconSize, IconSizeTraits>::array_to_vector(pSizes, n_sizes, Glib::OWNERSHIP_SHALLOW);
}

} /* namespace Gtk */


namespace
{
} // anonymous namespace


/* Why reinterpret_cast<IconSet*>(gobject) is needed:
 *
 * A IconSet instance is in fact always a GtkIconSet instance.
 * Unfortunately, GtkIconSet cannot be a member of IconSet,
 * because it is an opaque struct.  Also, the C interface does not provide
 * any hooks to install a destroy notification handler, thus we cannot
 * wrap it dynamically either.
 *
 * The cast works because IconSet does not have any member data, and
 * it is impossible to derive from it.  This is ensured by not implementing
 * the (protected) default constructor.  The ctor is protected rather than
 * private just to avoid a compile warning.
 */

namespace Glib
{

Glib::RefPtr<Gtk::IconSet> wrap(GtkIconSet* object, bool take_copy)
{
  if(take_copy && object)
    gtk_icon_set_ref(object);

  // See the comment at the top of this file, if you want to know why the cast works.
  return Glib::RefPtr<Gtk::IconSet>(reinterpret_cast<Gtk::IconSet*>(object));
}

} // namespace Glib


namespace Gtk
{


// static
Glib::RefPtr<IconSet> IconSet::create()
{
  // See the comment at the top of this file, if you want to know why the cast works.
  return Glib::RefPtr<IconSet>(reinterpret_cast<IconSet*>(gtk_icon_set_new()));
}

void IconSet::reference() const
{
  // See the comment at the top of this file, if you want to know why the cast works.
  gtk_icon_set_ref(reinterpret_cast<GtkIconSet*>(const_cast<IconSet*>(this)));
}

void IconSet::unreference() const
{
  // See the comment at the top of this file, if you want to know why the cast works.
  gtk_icon_set_unref(reinterpret_cast<GtkIconSet*>(const_cast<IconSet*>(this)));
}

GtkIconSet* IconSet::gobj()
{
  // See the comment at the top of this file, if you want to know why the cast works.
  return reinterpret_cast<GtkIconSet*>(this);
}

const GtkIconSet* IconSet::gobj() const
{
  // See the comment at the top of this file, if you want to know why the cast works.
  return reinterpret_cast<const GtkIconSet*>(this);
}

GtkIconSet* IconSet::gobj_copy() const
{
  // See the comment at the top of this file, if you want to know why the cast works.
  GtkIconSet *const gobject = reinterpret_cast<GtkIconSet*>(const_cast<IconSet*>(this));
  gtk_icon_set_ref(gobject);
  return gobject;
}


Glib::RefPtr<IconSet> IconSet::copy() const
{
  return Glib::wrap(gtk_icon_set_copy(const_cast<GtkIconSet*>(gobj())));
}

Glib::RefPtr<Gdk::Pixbuf> IconSet::render_icon_pixbuf(const Glib::RefPtr<StyleContext>& context, IconSize size)
{
  return Glib::wrap(gtk_icon_set_render_icon_pixbuf(gobj(), Glib::unwrap(context), static_cast<GtkIconSize>(int(size))));
}

void IconSet::add_source(const IconSource& source)
{
  gtk_icon_set_add_source(gobj(), (source).gobj()); 
}

Glib::RefPtr<IconSet> IconSet::lookup_default(const Gtk::StockID& stock_id)
{

  Glib::RefPtr<IconSet> retvalue = Glib::wrap(gtk_icon_factory_lookup_default((stock_id).get_c_str()));

  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us
  return retvalue;
}


} // namespace Gtk


