// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/numerableicon.h>
#include <gtkmm/private/numerableicon_p.h>


/* Copyright (C) 2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::NumerableIcon> wrap(GtkNumerableIcon* object, bool take_copy)
{
  return Glib::RefPtr<Gtk::NumerableIcon>( dynamic_cast<Gtk::NumerableIcon*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& NumerableIcon_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &NumerableIcon_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_numerable_icon_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void NumerableIcon_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* NumerableIcon_Class::wrap_new(GObject* object)
{
  return new NumerableIcon((GtkNumerableIcon*)object);
}


/* The implementation: */

GtkNumerableIcon* NumerableIcon::gobj_copy()
{
  reference();
  return gobj();
}

NumerableIcon::NumerableIcon(const Glib::ConstructParams& construct_params)
:
  Gio::EmblemedIcon(construct_params)
{

}

NumerableIcon::NumerableIcon(GtkNumerableIcon* castitem)
:
  Gio::EmblemedIcon((GEmblemedIcon*)(castitem))
{}


NumerableIcon::~NumerableIcon()
{}


NumerableIcon::CppClassType NumerableIcon::numerableicon_class_; // initialize static member

GType NumerableIcon::get_type()
{
  return numerableicon_class_.init().get_type();
}


GType NumerableIcon::get_base_type()
{
  return gtk_numerable_icon_get_type();
}


NumerableIcon::NumerableIcon(const Glib::RefPtr<Gio::Icon>& icon)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gio::EmblemedIcon(Glib::ConstructParams(numerableicon_class_.init(), "icon", const_cast<GIcon*>(Glib::unwrap<Gio::Icon>(icon)), static_cast<char*>(0)))
{
  

}

NumerableIcon::NumerableIcon(const Glib::RefPtr<Gio::Icon>& icon, const Glib::RefPtr<StyleContext>& style_context)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gio::EmblemedIcon(Glib::ConstructParams(numerableicon_class_.init(), "icon", const_cast<GIcon*>(Glib::unwrap<Gio::Icon>(icon)), "style_context", Glib::unwrap(style_context), static_cast<char*>(0)))
{
  

}

Glib::RefPtr<NumerableIcon> NumerableIcon::create(const Glib::RefPtr<Gio::Icon>& icon)
{
  return Glib::RefPtr<NumerableIcon>( new NumerableIcon(icon) );
}

Glib::RefPtr<NumerableIcon> NumerableIcon::create(const Glib::RefPtr<Gio::Icon>& icon, const Glib::RefPtr<StyleContext>& context)
{
  return Glib::RefPtr<NumerableIcon>( new NumerableIcon(icon, context) );
}

Glib::RefPtr<StyleContext> NumerableIcon::get_style_context()
{

  Glib::RefPtr<StyleContext> retvalue = Glib::wrap(gtk_numerable_icon_get_style_context(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const StyleContext> NumerableIcon::get_style_context() const
{
  return const_cast<NumerableIcon*>(this)->get_style_context();
}

void NumerableIcon::set_style_context(const Glib::RefPtr<StyleContext>& style)
{
  gtk_numerable_icon_set_style_context(gobj(), Glib::unwrap(style)); 
}

int NumerableIcon::get_count() const
{
  return gtk_numerable_icon_get_count(const_cast<GtkNumerableIcon*>(gobj()));
}

void NumerableIcon::set_count(int count)
{
  gtk_numerable_icon_set_count(gobj(), count); 
}

Glib::ustring NumerableIcon::get_label() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_numerable_icon_get_label(const_cast<GtkNumerableIcon*>(gobj())));
}

void NumerableIcon::set_label(const Glib::ustring& label)
{
  gtk_numerable_icon_set_label(gobj(), label.c_str()); 
}

void NumerableIcon::set_background_gicon(const Glib::RefPtr<Gio::Icon>& icon)
{
  gtk_numerable_icon_set_background_gicon(gobj(), const_cast<GIcon*>(Glib::unwrap<Gio::Icon>(icon))); 
}

Glib::RefPtr<Gio::Icon> NumerableIcon::get_background_gicon()
{

  Glib::RefPtr<Gio::Icon> retvalue = Glib::wrap(gtk_numerable_icon_get_background_gicon(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const Gio::Icon> NumerableIcon::get_background_gicon() const
{
  return const_cast<NumerableIcon*>(this)->get_background_gicon();
}

void NumerableIcon::set_background_icon_name(const Glib::ustring& icon_name)
{
  gtk_numerable_icon_set_background_icon_name(gobj(), icon_name.c_str()); 
}

Glib::ustring NumerableIcon::get_background_icon_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_numerable_icon_get_background_icon_name(const_cast<GtkNumerableIcon*>(gobj())));
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< int > NumerableIcon::property_count() 
{
  return Glib::PropertyProxy< int >(this, "count");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< int > NumerableIcon::property_count() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "count");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > NumerableIcon::property_label() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "label");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > NumerableIcon::property_label() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "label");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::RefPtr<StyleContext> > NumerableIcon::property_style_context() 
{
  return Glib::PropertyProxy< Glib::RefPtr<StyleContext> >(this, "style-context");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::RefPtr<StyleContext> > NumerableIcon::property_style_context() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<StyleContext> >(this, "style-context");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::RefPtr<Gio::Icon> > NumerableIcon::property_background_icon() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gio::Icon> >(this, "background-icon");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::Icon> > NumerableIcon::property_background_icon() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::Icon> >(this, "background-icon");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > NumerableIcon::property_background_icon_name() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "background-icon-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > NumerableIcon::property_background_icon_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "background-icon-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gtk


