// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/grid.h>
#include <gtkmm/private/grid_p.h>


/*
 *
 * Copyright 2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>

namespace Gtk
{

} /* namespace Gtk */

namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::Grid* wrap(GtkGrid* object, bool take_copy)
{
  return dynamic_cast<Gtk::Grid *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Grid_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Grid_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_grid_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Orientable::add_interface(get_type());

  }

  return *this;
}


void Grid_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Grid_Class::wrap_new(GObject* o)
{
  return manage(new Grid((GtkGrid*)(o)));

}


/* The implementation: */

Grid::Grid(const Glib::ConstructParams& construct_params)
:
  Gtk::Container(construct_params)
{
  }

Grid::Grid(GtkGrid* castitem)
:
  Gtk::Container((GtkContainer*)(castitem))
{
  }

Grid::~Grid()
{
  destroy_();
}

Grid::CppClassType Grid::grid_class_; // initialize static member

GType Grid::get_type()
{
  return grid_class_.init().get_type();
}


GType Grid::get_base_type()
{
  return gtk_grid_get_type();
}


Grid::Grid()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Container(Glib::ConstructParams(grid_class_.init()))
{
  

}

void Grid::attach(Widget& child, int left, int top, int width, int height)
{
  gtk_grid_attach(gobj(), (child).gobj(), left, top, width, height); 
}

void Grid::attach_next_to(Widget& child, Widget& sibling, PositionType side, int width, int height)
{
  gtk_grid_attach_next_to(gobj(), (child).gobj(), (sibling).gobj(), ((GtkPositionType)(side)), width, height); 
}

Widget* Grid::get_child_at(int left, int top)
{
  return Glib::wrap(gtk_grid_get_child_at(gobj(), left, top));
}

const Widget* Grid::get_child_at(int left, int top) const
{
  return Glib::wrap(gtk_grid_get_child_at(const_cast<GtkGrid*>(gobj()), left, top));
}

void Grid::insert_row(int position)
{
  gtk_grid_insert_row(gobj(), position); 
}

void Grid::insert_column(int position)
{
  gtk_grid_insert_column(gobj(), position); 
}

void Grid::insert_next_to(Widget& sibling, PositionType side)
{
  gtk_grid_insert_next_to(gobj(), (sibling).gobj(), ((GtkPositionType)(side))); 
}

void Grid::set_row_homogeneous(bool homogeneous)
{
  gtk_grid_set_row_homogeneous(gobj(), static_cast<int>(homogeneous)); 
}

bool Grid::get_row_homogeneous() const
{
  return gtk_grid_get_row_homogeneous(const_cast<GtkGrid*>(gobj()));
}

void Grid::set_row_spacing(guint spacing)
{
  gtk_grid_set_row_spacing(gobj(), spacing); 
}

guint Grid::get_row_spacing() const
{
  return gtk_grid_get_row_spacing(const_cast<GtkGrid*>(gobj()));
}

void Grid::set_column_homogeneous(bool homogeneous)
{
  gtk_grid_set_column_homogeneous(gobj(), static_cast<int>(homogeneous)); 
}

bool Grid::get_column_homogeneous() const
{
  return gtk_grid_get_column_homogeneous(const_cast<GtkGrid*>(gobj()));
}

void Grid::set_column_spacing(guint spacing)
{
  gtk_grid_set_column_spacing(gobj(), spacing); 
}

guint Grid::get_column_spacing() const
{
  return gtk_grid_get_column_spacing(const_cast<GtkGrid*>(gobj()));
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< guint > Grid::property_row_spacing() 
{
  return Glib::PropertyProxy< guint >(this, "row-spacing");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< guint > Grid::property_row_spacing() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "row-spacing");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< guint > Grid::property_column_spacing() 
{
  return Glib::PropertyProxy< guint >(this, "column-spacing");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< guint > Grid::property_column_spacing() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "column-spacing");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< bool > Grid::property_row_homogeneous() 
{
  return Glib::PropertyProxy< bool >(this, "row-homogeneous");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< bool > Grid::property_row_homogeneous() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "row-homogeneous");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< bool > Grid::property_column_homogeneous() 
{
  return Glib::PropertyProxy< bool >(this, "column-homogeneous");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< bool > Grid::property_column_homogeneous() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "column-homogeneous");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace Gtk


