// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/buildable.h>
#include <gtkmm/private/buildable_p.h>


// -*- c++ -*-
/* $Id: buildable.ccg,v 1.1 2003/01/21 13:38:48 murrayc Exp $ */

/* Copyright 2009 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::Buildable> wrap(GtkBuildable* object, bool take_copy)
{
  return Glib::RefPtr<Gtk::Buildable>( dynamic_cast<Gtk::Buildable*> (Glib::wrap_auto_interface<Gtk::Buildable> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Interface_Class& Buildable_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &Buildable_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = gtk_buildable_get_type();
  }

  return *this;
}

void Buildable_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 


}


Glib::ObjectBase* Buildable_Class::wrap_new(GObject* object)
{
  return new Buildable((GtkBuildable*)(object));
}


/* The implementation: */

Buildable::Buildable()
:
  Glib::Interface(buildable_class_.init())
{}

Buildable::Buildable(GtkBuildable* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

Buildable::Buildable(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

Buildable::~Buildable()
{}

// static
void Buildable::add_interface(GType gtype_implementer)
{
  buildable_class_.init().add_interface(gtype_implementer);
}

Buildable::CppClassType Buildable::buildable_class_; // initialize static member

GType Buildable::get_type()
{
  return buildable_class_.init().get_type();
}


GType Buildable::get_base_type()
{
  return gtk_buildable_get_type();
}


void Buildable::set_name(const Glib::ustring& name)
{
  gtk_buildable_set_name(gobj(), name.c_str()); 
}

Glib::ustring Buildable::get_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_buildable_get_name(const_cast<GtkBuildable*>(gobj())));
}


} // namespace Gtk


