// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/actionable.h>
#include <gtkmm/private/actionable_p.h>


// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2011 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtk.h>

namespace Gtk
{

} // namespace Gtk

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::Actionable> wrap(GtkActionable* object, bool take_copy)
{
  return Glib::RefPtr<Gtk::Actionable>( dynamic_cast<Gtk::Actionable*> (Glib::wrap_auto_interface<Gtk::Actionable> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Interface_Class& Actionable_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &Actionable_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = gtk_actionable_get_type();
  }

  return *this;
}

void Actionable_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 

  klass->get_action_name = &get_action_name_vfunc_callback;
  klass->set_action_name = &set_action_name_vfunc_callback;
  klass->get_action_target_value = &get_action_target_value_vfunc_callback;
  klass->set_action_target_value = &set_action_target_value_vfunc_callback;

}

const gchar* Actionable_Class::get_action_name_vfunc_callback(GtkActionable* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return g_strdup(obj->get_action_name_vfunc().c_str());
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_action_name)
    return (*base->get_action_name)(self);


  typedef const gchar* RType;
  return RType();
}
void Actionable_Class::set_action_name_vfunc_callback(GtkActionable* self, const gchar* action_name)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->set_action_name_vfunc(Glib::convert_const_gchar_ptr_to_ustring(action_name)
);
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->set_action_name)
    (*base->set_action_name)(self, action_name);

}
GVariant* Actionable_Class::get_action_target_value_vfunc_callback(GtkActionable* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return obj->get_action_target_value_vfunc().gobj_copy();
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_action_target_value)
    return (*base->get_action_target_value)(self);


  typedef GVariant* RType;
  return RType();
}
void Actionable_Class::set_action_target_value_vfunc_callback(GtkActionable* self, GVariant* action_target_value)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->set_action_target_value_vfunc(Glib::wrap(action_target_value,true)
);
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->set_action_target_value)
    (*base->set_action_target_value)(self, action_target_value);

}


Glib::ObjectBase* Actionable_Class::wrap_new(GObject* object)
{
  return new Actionable((GtkActionable*)(object));
}


/* The implementation: */

Actionable::Actionable()
:
  Glib::Interface(actionable_class_.init())
{}

Actionable::Actionable(GtkActionable* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

Actionable::Actionable(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

Actionable::~Actionable()
{}

// static
void Actionable::add_interface(GType gtype_implementer)
{
  actionable_class_.init().add_interface(gtype_implementer);
}

Actionable::CppClassType Actionable::actionable_class_; // initialize static member

GType Actionable::get_type()
{
  return actionable_class_.init().get_type();
}


GType Actionable::get_base_type()
{
  return gtk_actionable_get_type();
}


Glib::ustring Actionable::get_action_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_actionable_get_action_name(const_cast<GtkActionable*>(gobj())));
}

void Actionable::set_action_name(const Glib::ustring& action_name)
{
  gtk_actionable_set_action_name(gobj(), action_name.c_str()); 
}

Glib::VariantBase Actionable::get_action_target_value()
{
  return Glib::wrap(gtk_actionable_get_action_target_value(gobj()), false);
}

const Glib::VariantBase Actionable::get_action_target_value() const
{
  return const_cast<Actionable*>(this)->get_action_target_value();
}

void Actionable::set_action_target_value(const Glib::VariantBase& target_value)
{
  gtk_actionable_set_action_target_value(gobj(), const_cast<GVariant*>((target_value).gobj())); 
}

void Actionable::set_detailed_action_name(const Glib::ustring& detailed_action_name)
{
  gtk_actionable_set_detailed_action_name(gobj(), detailed_action_name.c_str()); 
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > Actionable::property_action_name() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "action-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > Actionable::property_action_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "action-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::VariantBase > Actionable::property_action_target() 
{
  return Glib::PropertyProxy< Glib::VariantBase >(this, "action-target");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::VariantBase > Actionable::property_action_target() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::VariantBase >(this, "action-target");
}
#endif //GLIBMM_PROPERTIES_ENABLED


Glib::ustring Gtk::Actionable::get_action_name_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_action_name)
    return Glib::convert_const_gchar_ptr_to_ustring((*base->get_action_name)(const_cast<GtkActionable*>(gobj())));

  typedef Glib::ustring RType;
  return RType();
}
void Gtk::Actionable::set_action_name_vfunc(const Glib::ustring& action_name) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->set_action_name)
    (*base->set_action_name)(gobj(),action_name.c_str());
}
Glib::VariantBase Gtk::Actionable::get_action_target_value_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_action_target_value)
    return Glib::wrap((*base->get_action_target_value)(const_cast<GtkActionable*>(gobj())), false);

  typedef Glib::VariantBase RType;
  return RType();
}
void Gtk::Actionable::set_action_target_value_vfunc(const Glib::VariantBase& action_target_value) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->set_action_target_value)
    (*base->set_action_target_value)(gobj(),const_cast<GVariant*>((action_target_value).gobj()));
}


} // namespace Gtk


